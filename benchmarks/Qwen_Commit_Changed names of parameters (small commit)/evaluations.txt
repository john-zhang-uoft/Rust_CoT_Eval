Loaded 163 samples from newest_parsed_completions.jsonl

Testing Rust/0 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn has_close_elements(numbers:Vec<f32>, threshold: f32) -> bool{
for i in 0..numbers.len() {
        for j in i + 1..numbers.len() {
            if (numbers[i] - numbers[j]).abs() <= threshold {
                return true;
            }
        }
    }
    false
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_has_close_elements() {
        assert_eq!(has_close_elements(vec![11.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);
        assert_eq!(has_close_elements(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);
        assert_eq!(has_close_elements(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);
        assert_eq!(has_close_elements(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);
        assert_eq!(has_close_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);
        assert_eq!(has_close_elements(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);
        assert_eq!(has_close_elements(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/1 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn separate_paren_groups(paren_string: String) -> Vec<String>{
let mut result = Vec::new();
    let mut current_group = String::new();
    let mut balance = 0;

    for c in paren_string.chars().filter(|c| !c.is_whitespace()) {
        current_group.push(c);
        if c == '(' {
            balance += 1;
        } else if c == ')' {
            balance -= 1;
        }

        if balance == 0 && !current_group.is_empty() {
            result.push(current_group.clone());
            current_group.clear();
        }
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_separate_paren_groups() {
        assert_eq!(
            separate_paren_groups(String::from("(()()) ((())) () ((())()())")),
            vec!["(()())", "((()))", "()", "((())()())"]
        );
        assert_eq!(
            separate_paren_groups(String::from("() (()) ((())) (((())))")),
            vec!["()", "(())", "((()))", "(((())))"]
        );
        assert_eq!(
            separate_paren_groups(String::from("(()(())((())))")),
            vec!["(()(())((())))"]
        );
        assert_eq!(
            separate_paren_groups(String::from("( ) (( )) (( )( ))")),
            vec!["()", "(())", "(()())"]
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/2 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn truncate_number(number: &f32) -> f32{
number - number.floor()
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_truncate_number() {
        assert_eq!(truncate_number(&3.5), 0.5);
        let t1: f32 = 1.33 - 0.33;
        assert!(truncate_number(&t1) < 0.000001);
        let t2: f32 = 123.456 - 0.456;
        assert!(truncate_number(&t2) < 0.000001);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/3 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn below_zero(operations:Vec<i32>) -> bool{
let mut balance = 0;
    for operation in operations {
        balance += operation;
        if balance < 0 {
            return true;
        }
    }
    false
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_below_zero() {
        assert_eq!(below_zero(vec![]), false);
        assert_eq!(below_zero(vec![1, 2, -3, 1, 2, -3]), false);
        assert_eq!(below_zero(vec![1, 2, -4, 5, 6]), true);
        assert_eq!(below_zero(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);
        assert_eq!(below_zero(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);
        assert_eq!(below_zero(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/4 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn mean_absolute_deviation(numbers:Vec<f32>) -> f32{
if numbers.is_empty() {
        return 0.0;
    }
    let mean = numbers.iter().sum::<f32>() / numbers.len() as f32;
    numbers.iter().map(|&x| (x - mean).abs()).sum::<f32>() / numbers.len() as f32
}

#[cfg(test)]
mod tests {
    use super::*;

  #[test]
    fn test_mean_absolute_deviation() {
        assert!(mean_absolute_deviation(vec![1.0, 2.0, 3.0]) - 2.0 / 3.0 < 0.000001);
        assert!(mean_absolute_deviation(vec![1.0, 2.0, 3.0, 4.0]) - 1.0 < 0.000001);
        assert!(mean_absolute_deviation(vec![1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0 < 0.000001);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/5 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn intersperse(numbers:Vec<u32>, delimeter: u32) -> Vec<u32>{
let mut result = Vec::new();
    let mut iter = numbers.into_iter().peekable();
    
    while let Some(number) = iter.next() {
        result.push(number);
        if iter.peek().is_some() {
            result.push(delimeter);
        }
    }
    
    result
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_intersperse() {
        assert!(intersperse(vec![], 7) == vec![]);
        assert!(intersperse(vec![5, 6, 3, 2], 8) == vec![5, 8, 6, 8, 3, 8, 2]);
        assert!(intersperse(vec![2, 2, 2], 2) == vec![2, 2, 2, 2, 2]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/6 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn parse_nested_parens(paren_string:String) -> Vec<i32>{
paren_string.split_whitespace().map(|group| {
        let mut max_depth = 0;
        let mut current_depth = 0;
        for c in group.chars() {
            match c {
                '(' => {
                    current_depth += 1;
                    max_depth = max(max_depth, current_depth);
                },
                ')' => current_depth -= 1,
                _ => {}
            }
        }
        max_depth
    }).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_parse_nested_parens() {
        assert!(
            parse_nested_parens(String::from("(()()) ((())) () ((())()())")) == vec![2, 3, 1, 3]
        );
        assert!(parse_nested_parens(String::from("() (()) ((())) (((())))")) == vec![1, 2, 3, 4]);
        assert!(parse_nested_parens(String::from("(()(())((())))")) == vec![4]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/7 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn filter_by_substring(strings: Vec<String>, substring:String) -> Vec<String>{
strings.into_iter().filter(|s| s.contains(&substring)).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_filter_by_substring() {
        let v_empty: Vec<String> = vec![];
        assert!(filter_by_substring(vec![], String::from("john")) == v_empty);
        assert!(
            filter_by_substring(
                vec![
                    "xxx".to_string(),
                    "asd".to_string(),
                    "xxy".to_string(),
                    "john doe".to_string(),
                    "xxxAAA".to_string(),
                    "xxx".to_string()
                ],
                String::from("xxx")
            ) == vec!["xxx", "xxxAAA", "xxx"]
        );
        assert!(
            filter_by_substring(
                vec![
                    "xxx".to_string(),
                    "asd".to_string(),
                    "aaaxxy".to_string(),
                    "john doe".to_string(),
                    "xxxAAA".to_string(),
                    "xxx".to_string()
                ],
                String::from("xx")
            ) == vec!["xxx", "aaaxxy", "xxxAAA", "xxx"]
        );
        assert!(
            filter_by_substring(
                vec![
                    "grunt".to_string(),
                    "trumpet".to_string(),
                    "prune".to_string(),
                    "gruesome".to_string()
                ],
                String::from("run")
            ) == ["grunt", "prune"]
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/8 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sum_product(numbers:Vec<i32>) -> (i32,i32){
let sum: i32 = numbers.iter().sum();
    let product: i64 = numbers.iter().fold(1, |acc, &x| acc * x as i64);
    (sum, product)
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_sum_product() {
        assert!(sum_product(vec![]) == (0, 1));
        assert!(sum_product(vec![1, 1, 1]) == (3, 1));
        assert!(sum_product(vec![100, 0]) == (100, 0));
        assert!(sum_product(vec![3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7));
        assert!(sum_product(vec![10]) == (10, 10));
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_8_gen0.jsonl

Testing Rust/9 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn rolling_max(numbers:Vec<i32>) -> Vec<i32>{
let mut result = Vec::new();
    let mut current_max = i32::MIN;
    for &number in numbers.iter() {
        current_max = max(current_max, number);
        result.push(current_max);
    }
    result
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_rolling_max() {
        assert!(rolling_max(vec![]) == vec![]);
        assert!(rolling_max(vec![1, 2, 3, 4]) == vec![1, 2, 3, 4]);
        assert!(rolling_max(vec![4, 3, 2, 1]) == vec![4, 4, 4, 4]);
        assert!(rolling_max(vec![3, 2, 3, 100, 3]) == vec![3, 3, 3, 100, 100]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/10 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn is_palindrome_10(str: &str) -> bool {
        let s: String = str.chars().rev().collect();
        return s==str;
    }

fn make_palindrome(str: &str) -> String {
let n = str.len();
    for i in 0..n {
        if is_palindrome_10(&str[i..]) {
            let prefix = &str[..i];
            let reversed_prefix: String = prefix.chars().rev().collect();
            return str.to_string() + &reversed_prefix;
        }
    }
    str.to_string() + &str.chars().rev().collect::<String>()
}

fn is_palindrome_10(str: &str) -> bool {
    let s: String = str.chars().rev().collect();
    return s == str;
}





#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_make_palindrome() {
        assert_eq!(make_palindrome(""), "");
        assert_eq!(make_palindrome("x"), "x");
        assert_eq!(make_palindrome("xyz"), "xyzyx");
        assert_eq!(make_palindrome("xyx"), "xyx");
        assert_eq!(make_palindrome("jerry"), "jerryrrej");
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_10_gen0.jsonl

Testing Rust/11 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn string_xor(a:String, b:String) -> String{
let max_len = cmp::max(a.len(), b.len());
    let a = format!("{:0>width$}", a, width = max_len);
    let b = format!("{:0>width$}", b, width = max_len);
    let mut result = String::with_capacity(max_len);

    for (char_a, char_b) in a.chars().zip(b.chars()) {
        let bit_a = char_a.to_digit(10).unwrap();
        let bit_b = char_b.to_digit(10).unwrap();
        result.push(((bit_a ^ bit_b) as u8 + b'0') as char);
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_string_xor() {
        assert!(string_xor("111000".to_string(), "101010".to_string()) == "010010");
        assert!(string_xor("1".to_string(), "1".to_string()) == "0");
        assert!(string_xor("0101".to_string(), "0000".to_string()) == "0101");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/12 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn longest(strings:Vec<String>) -> Option<String>{

strings.into_iter().fold(None, |acc, s| {
        match acc {
            None => Some(s),
            Some(current) => {
                if s.len() > current.len() {
                    Some(s)
                } else {
                    Some(current)
                }
            }
        }
    })
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_longest() {
        assert!(longest(vec![]) == None);
        assert!(
            longest(vec!["x".to_string(), "y".to_string(), "z".to_string()])
                == Some("x".to_string())
        );
        assert!(
            longest(vec![
                "x".to_string(),
                "yyy".to_string(),
                "zzzz".to_string(),
                "www".to_string(),
                "kkkk".to_string(),
                "abc".to_string()
            ]) == Some("zzzz".to_string())
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/13 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn greatest_common_divisor(mut a:i32,mut b:i32) -> i32{

a = a.abs();
    b = b.abs();
    while b != 0 {
        let temp = b;
        b = a % b;
        a = temp;
    }
    a
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_greatest_common_divisor() {
        assert!(greatest_common_divisor(3, 7) == 1);
        assert!(greatest_common_divisor(10, 15) == 5);
        assert!(greatest_common_divisor(49, 14) == 7);
        assert!(greatest_common_divisor(144, 60) == 12);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/14 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn all_prefixes(string: String) -> Vec<String>{

let mut prefixes = Vec::new();
    for i in 1..=string.len() {
        prefixes.push(string[0..i].to_string());
    }
    prefixes
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_all_prefixes() {
        let v_empty: Vec<String> = vec![];
        assert!(all_prefixes(String::from("")) == v_empty);
        assert!(
            all_prefixes(String::from("asdfgh"))
                == vec!["a", "as", "asd", "asdf", "asdfg", "asdfgh"]
        );
        assert!(all_prefixes(String::from("WWW")) == vec!["W", "WW", "WWW"]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/15 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn string_sequence(n:i32) -> String{

(0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(" ")
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_string_sequence() {
        assert!(string_sequence(0) == "0".to_string());
        assert!(string_sequence(3) == "0 1 2 3".to_string());
        assert!(string_sequence(10) == "0 1 2 3 4 5 6 7 8 9 10".to_string());
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/16 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn count_distinct_characters(str:String) -> i32{

let mut unique_chars = HashSet::new();
    for c in str.to_ascii_lowercase().chars() {
        if c != '`' {
            unique_chars.insert(c);
        }
    }
    unique_chars.len() as i32
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_count_distinct_characters() {
        assert!(count_distinct_characters("".to_string()) == 0);
        assert!(count_distinct_characters("abcde".to_string()) == 5);
        assert!(
            count_distinct_characters(
                "abcde".to_string() + &"cade".to_string() + &"CADE".to_string()
            ) == 5
        );
        assert!(count_distinct_characters("aaaaAAAAaaaa".to_string()) == 1);
        assert!(count_distinct_characters("Jerry jERRY JeRRRY".to_string()) == 5);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/17 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn parse_music(music_string:String) -> Vec<i32>{

let mut beats = Vec::new();
    let mut chars = music_string.chars().peekable();
    
    while let Some(c) = chars.next() {
        match c {
            'o' => {
                if chars.peek() == Some(&'|') {
                    beats.push(2);
                    chars.next(); // consume the '|'
                } else {
                    beats.push(4);
                }
            },
            '.' => {
                if chars.peek() == Some(&'|') {
                    beats.push(1);
                    chars.next(); // consume the '|'
                } else {
                    beats.push(1); // handle '.' without '|'
                }
            },
            _ => {} // ignore invalid characters
        }
    }
    
    beats
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_parse_music() {
        assert!(parse_music(" ".to_string()) == []);
        assert!(parse_music("o o o o".to_string()) == vec![4, 4, 4, 4]);
        assert!(parse_music(".| .| .| .|".to_string()) == vec![1, 1, 1, 1]);
        assert!(parse_music("o| o| .| .| o o o o".to_string()) == vec![2, 2, 1, 1, 4, 4, 4, 4]);
        assert!(parse_music("o| .| o| .| o o| o o|".to_string()) == vec![2, 1, 2, 1, 4, 2, 4, 2]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/18 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn how_many_times(string: String, substring:String) -> i32{

// Handle the case where the substring is empty
    if substring.is_empty() {
        return 0;
    }

    let mut count = 0;
    let mut start = 0;

    while let Some(position) = string[start..].find(&substring) {
        count += 1;
        start += position + 1;
    }

    count
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_how_many_times() {
        assert!(how_many_times("".to_string(), "x".to_string()) == 0);
        assert!(how_many_times("xyxyxyx".to_string(), "x".to_string()) == 4);
        assert!(how_many_times("cacacacac".to_string(), "cac".to_string()) == 4);
        assert!(how_many_times("john doe".to_string(), "john".to_string()) == 1);
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/19 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sort_numbers(numbers:String) -> String {

let number_map: HashMap<&str, i32> = [
        ("zero", 0), ("one", 1), ("two", 2), ("three", 3), ("four", 4),
        ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9)
    ].iter().cloned().collect();

    let mut num_vec: Vec<i32> = numbers.split_whitespace()
        .filter_map(|s| number_map.get(s))
        .cloned()
        .collect();

    num_vec.sort();

    let reverse_map: HashMap<i32, &str> = number_map.iter().map(|(&k, &v)| (v, k)).collect();

    num_vec.iter()
        .map(|&num| reverse_map[&num])
        .collect::<Vec<&str>>()
        .join(" ")
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_sort_numbers() {
        assert!(sort_numbers("".to_string()) == "".to_string());
        assert!(sort_numbers("three".to_string()) == "three".to_string());
        assert!(sort_numbers("three five nine".to_string()) == "three five nine");
        assert!(
            sort_numbers("five zero four seven nine eight".to_string())
                == "zero four five seven eight nine".to_string()
        );
        assert!(
            sort_numbers("six five four three two one zero".to_string())
                == "zero one two three four five six".to_string()
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/20 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn find_closest_elements(numbers:Vec<f32>) -> (f32,f32){

if numbers.len() < 2 {
        panic!("The list must contain at least two numbers.");
    }

    let mut closest_pair = (numbers[0], numbers[1]);
    let mut min_distance = (closest_pair.1 - closest_pair.0).abs();

    for i in 0..numbers.len() {
        for j in i + 1..numbers.len() {
            let distance = (numbers[i] - numbers[j]).abs();
            if distance < min_distance {
                min_distance = distance;
                closest_pair = if numbers[i] < numbers[j] { (numbers[i], numbers[j]) } else { (numbers[j], numbers[i]) };
            }
        }
    }

    closest_pair
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_find_closest_elements() {
        assert!(find_closest_elements(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0));
        assert!(find_closest_elements(vec![1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9));
        assert!(find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2));
        assert!(find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0));
        assert!(find_closest_elements(vec![1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1));
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/21 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn rescale_to_unit(numbers:Vec<f32>) -> Vec<f32> {

if numbers.len() < 2 {
        panic!("The list must contain at least two elements.");
    }

    let min_num = numbers.iter().cloned().fold(f32::INFINITY, f32::min);
    let max_num = numbers.iter().cloned().fold(f32::NEG_INFINITY, f32::max);

    if min_num == max_num {
        panic!("All numbers in the list are the same.");
    }

    numbers.into_iter().map(|num| (num - min_num) / (max_num - min_num)).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_rescale_to_unit() {
        assert!(rescale_to_unit(vec![2.0, 49.9]) == [0.0, 1.0]);
        assert!(rescale_to_unit(vec![100.0, 49.9]) == [1.0, 0.0]);
        assert!(rescale_to_unit(vec![1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);
        assert!(rescale_to_unit(vec![2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);
        assert!(rescale_to_unit(vec![12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/22 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn filter_integers(values: Vec<Box<dyn Any>>) -> Vec<i32> {

values.into_iter()
        .filter_map(|v| v.downcast::<i32>().ok())
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_filter_integers() {
        assert_eq!(filter_integers(vec![]), vec![]);
        let v_empty: Vec<Box<dyn Any>> = vec![];
        assert_eq!(
            filter_integers(vec![
                Box::new(4),
                Box::new(v_empty),
                Box::new(23.2),
                Box::new(9),
                Box::new(String::from("adasd"))
            ]),
            vec![4, 9]
        );
        assert_eq!(
            filter_integers(vec![
                Box::new(3),
                Box::new('c'),
                Box::new(3),
                Box::new(3),
                Box::new('a'),
                Box::new('b')
            ]),
            vec![3, 3, 3]
        );
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_22_gen0.jsonl

Testing Rust/23 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn strlen(strings:String) -> i32{

strings.chars().count() as i32
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_strlen() {
        assert!(strlen("".to_string()) == 0);
        assert!(strlen("x".to_string()) == 1);
        assert!(strlen("asdasnakj".to_string()) == 9);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/24 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn largest_divisor(n:i32) -> i32{

for i in (1..n).rev() {
        if n % i == 0 {
            return i;
        }
    }
    1 // If no divisor is found, return 1 (though this should not happen for n > 1)
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_largest_divisor() {
        assert!(largest_divisor(3) == 1);
        assert!(largest_divisor(7) == 1);
        assert!(largest_divisor(10) == 5);
        assert!(largest_divisor(100) == 50);
        assert!(largest_divisor(49) == 7);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/25 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn factorize(n: i32) -> Vec<i32> {

let mut factors = Vec::new();
    let mut num = n;
    let mut divisor = 2;

    while num > 1 {
        while num % divisor == 0 {
            factors.push(divisor);
            num /= divisor;
        }
        divisor += 1;
    }

    factors
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_factorize() {
        assert_eq!(factorize(2), vec![2]);
        assert_eq!(factorize(4), vec![2, 2]);
        assert_eq!(factorize(8), vec![2, 2, 2]);
        assert_eq!(factorize(3 * 19), vec![3, 19]);
        assert_eq!(factorize(3 * 19 * 3 * 19), vec![3, 3, 19, 19]);
        assert_eq!(
            factorize(3 * 19 * 3 * 19 * 3 * 19),
            vec![3, 3, 3, 19, 19, 19]
        );
        assert_eq!(factorize(3 * 19 * 19 * 19), vec![3, 19, 19, 19]);
        assert_eq!(factorize(3 * 2 * 3), vec![2, 3, 3]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/26 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn remove_duplicates(numbers: Vec<i32>) -> Vec<i32>{

let mut counts = HashMap::new();
    for &number in &numbers {
        *counts.entry(number).or_insert(0) += 1;
    }
    numbers.into_iter().filter(|&n| counts[&n] == 1).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_remove_duplicates() {
        assert!(remove_duplicates(vec![]) == []);
        assert!(remove_duplicates(vec![1, 2, 3, 4]) == vec![1, 2, 3, 4]);
        assert!(remove_duplicates(vec![1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/27 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

pub fn flip_case(string: String) -> String{

string.chars().map(|c| if c.is_ascii_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_flip_case() {
        assert!(flip_case("".to_string()) == "".to_string());
        assert!(flip_case("Hello!".to_string()) == "hELLO!".to_string());
        assert!(
            flip_case("These violent delights have violent ends".to_string())
                == "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS".to_string()
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/28 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn concatenate(strings:Vec<String>) -> String{

strings.concat()
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_concatenate() {
        assert!(concatenate(vec![]) == "".to_string());
        assert!(
            concatenate(vec!["x".to_string(), "y".to_string(), "z".to_string()])
                == "xyz".to_string()
        );
        assert!(
            concatenate(vec![
                "x".to_string(),
                "y".to_string(),
                "z".to_string(),
                "w".to_string(),
                "k".to_string()
            ]) == "xyzwk".to_string()
        );
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/29 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn filter_by_prefix(strings:Vec<String>, prefix:String)-> Vec<String>{

strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_filter_by_prefix() {
        let v_empty: Vec<String> = vec![];
        assert!(filter_by_prefix(vec![], "john".to_string()) == v_empty);
        assert!(
            filter_by_prefix(
                vec![
                    "xxx".to_string(),
                    "asd".to_string(),
                    "xxy".to_string(),
                    "john doe".to_string(),
                    "xxxAAA".to_string(),
                    "xxx".to_string()
                ],
                "xxx".to_string()
            ) == vec!["xxx", "xxxAAA", "xxx"]
        );
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/30 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn get_positive(numbers:Vec<i32>) -> Vec<i32>{

numbers.into_iter().filter(|&x| x > 0).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

  #[test]
    fn test_get_positive() {
        assert!(get_positive(vec![-1, -2, 4, 5, 6]) == [4, 5, 6]);
        assert!(
            get_positive(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
        );
        assert!(get_positive(vec![-1, -2]) == []);
        assert!(get_positive(vec![]) == []);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/32 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn poly(xs: &Vec<f64>, x: f64) -> f64 {
        let mut sum = 0.0;
        for i in 0..xs.len() {
            sum += xs[i] * x.powi(i as i32);
        }
        sum
    }
    
    fn find_zero(xs: &Vec<f64>) -> f64 {
let mut low: f64 = -100.0;
    let mut high: f64 = 100.0;
    let tolerance: f64 = 1e-7;

    while (high - low).abs() > tolerance {
        let mid = (low + high) / 2.0;
        if poly(xs, mid) == 0.0 {
            return mid;
        } else if poly(xs, low) * poly(xs, mid) < 0.0 {
            high = mid;
        } else {
            low = mid;
        }
    }

    (low + high) / 2.0
}

fn poly(xs: &Vec<f64>, x: f64) -> f64 {
    let mut sum = 0.0;
    for i in 0..xs.len() {
        sum += xs[i] * x.powi(i as i32);
    }
    sum
}






#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_poly() {
        let mut rng = rand::thread_rng();
        let mut solution: f64;
        let mut ncoeff: i32;
        for _ in 0..100 {
            ncoeff = 2 * (1 + rng.gen_range(0, 4));
            let mut coeffs = vec![];
            for _ in 0..ncoeff {
                let coeff = -10 + rng.gen_range(0, 21);
                if coeff == 0 {
                    coeffs.push(1.0);
                } else {
                    coeffs.push(coeff as f64);
                }
            }
            solution = find_zero(&coeffs);
            assert!(poly(&coeffs, solution).abs() < 1e-3);
        }
    }

}


-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_32_gen0.jsonl

Testing Rust/33 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sort_third(l: Vec<i32>) -> Vec<i32> {

let mut sorted_indices: Vec<usize> = l.iter().enumerate().filter_map(|(i, _)| if i % 3 == 0 { Some(i) } else { None }).collect();
    let mut values: Vec<i32> = sorted_indices.iter().map(|&i| l[i]).collect();
    values.sort();
    let mut result = l.clone();
    for (idx, &value) in sorted_indices.iter().zip(values.iter()) {
        result[*idx] = value;
    }
    result
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_sort_third() {
        let mut l = vec![1, 2, 3];
        assert_eq!(sort_third(l), vec![1, 2, 3]);
        l = vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];
        assert_eq!(sort_third(l), vec![5, 3, -5, 1, -3, 3, 2, 0, 123, 9, -10]);
        l = vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10];
        assert_eq!(sort_third(l), vec![5, 8, -12, -10, 23, 2, 3, 11, 12, 4]);
        l = vec![5, 6, 3, 4, 8, 9, 2];
        assert_eq!(sort_third(l), vec![5, 6, 3, 2, 8, 9, 4]);
        l = vec![5, 8, 3, 4, 6, 9, 2];
        assert_eq!(sort_third(l), vec![5, 8, 3, 2, 6, 9, 4]);
        l = vec![5, 6, 9, 4, 8, 3, 2];
        assert_eq!(sort_third(l), vec![5, 6, 9, 2, 8, 3, 4]);
        l = vec![5, 6, 3, 4, 8, 9, 2, 1];
        assert_eq!(sort_third(l), vec![5, 6, 3, 2, 8, 9, 4, 1]);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_33_gen0.jsonl

Testing Rust/34 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn unique(nmbs:Vec<i32>)  -> Vec<i32>{

let mut unique_numbers: HashSet<i32> = HashSet::new();
    for n in nmbs {
        unique_numbers.insert(n);
    }
    let mut result: Vec<i32> = unique_numbers.into_iter().collect();
    result.sort();
    result
}

#[cfg(test)]
mod tests {
    use super::*;

  #[test]
    fn test_unique() {
        assert!(unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]) == vec![0, 2, 3, 5, 9, 123]);
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/35 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn maximum(nmbs:Vec<i32>) -> i32{

*nmbs.iter().max().unwrap_or(&i32::MIN)
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_maximum() {
        assert!(maximum(vec![1, 2, 3]) == 3);
        assert!(maximum(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124);
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/36 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn fizz_buzz(n:i32) -> i32{

let mut count = 0;
    for i in 1..n {
        if i % 11 == 0 || i % 13 == 0 {
            count += i.to_string().matches('7').count() as i32;
        }
    }
    count
}

#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn test_fizz_buzz() {
        assert!(fizz_buzz(50) == 0);
        assert!(fizz_buzz(78) == 2);
        assert!(fizz_buzz(79) == 3);
        assert!(fizz_buzz(100) == 3);
        assert!(fizz_buzz(200) == 6);
        assert!(fizz_buzz(4000) == 192);
        assert!(fizz_buzz(10000) == 639);
        assert!(fizz_buzz(100000) == 8026);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/37 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sort_even(nmbs:Vec<i32>) -> Vec<i32>{

let mut even_indices_values: Vec<i32> = nmbs.iter().enumerate()
        .filter_map(|(i, &x)| if i % 2 == 0 { Some(x) } else { None })
        .collect();
    even_indices_values.sort();

    let mut result = nmbs.clone();
    let mut even_iter = even_indices_values.into_iter();

    for (i, value) in result.iter_mut().enumerate() {
        if i % 2 == 0 {
            *value = even_iter.next().unwrap();
        }
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_sort_even() {
        assert_eq!(sort_even(vec![1, 2, 3]), vec![1, 2, 3]);
        assert_eq!(
            sort_even(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),
            vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]
        );
        assert_eq!(
            sort_even(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),
            vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/38 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

pub fn encode_cyclic(s: &str) -> String {
    // returns encoded string by cycling groups of three characters.
    // split string to groups. Each of length 3.
    let l = s.len();
    let num = (l + 2) / 3;
    let mut output = String::new();
    for i in 0..num {
        let group = &s[i * 3..std::cmp::min(l, (i + 1) * 3)];
        // cycle elements in each group. Unless group has fewer elements than 3.
        if group.len() == 3 {
            let x = format!("{}{}{}", &group[1..2], &group[2..3], &group[0..1]);
            output.push_str(&x);
        } else {
            output.push_str(group);
        }
    }
    output
}

fn decode_cyclic(s: &str) -> String {

let l = s.len();
    let num = (l + 2) / 3;
    let mut output = String::new();
    for i in 0..num {
        let start = i * 3;
        let end = min(l, start + 3);
        let group = &s[start..end];
        if group.len() == 3 {
            let x = format!("{}{}{}", &group[2..3], &group[0..1], &group[1..2]);
            output.push_str(&x);
        } else {
            output.push_str(group);
        }
    }
    output
}

fn encode_cyclic(s: &str) -> String {
    let l = s.len();
    let num = (l + 2) / 3;
    let mut output = String::new();
    for i in 0..num {
        let group = &s[i * 3..min(l, (i + 1) * 3)];
        if group.len() == 3 {
            let x = format!("{}{}{}", &group[1..2], &group[2..3], &group[0..1]);
            output.push_str(&x);
        } else {
            output.push_str(group);
        }
    }
    output
}





#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_decode_cyclic() {
        for _ in 0..100 {
            let l = 10 + rand::random::<u32>() % 11;
            let mut str = String::new();
            for _ in 0..l {
                let chr = 97 + rand::random::<u32>() % 26;
                str.push(chr as u8 as char);
            }
            let encoded_str = encode_cyclic(&str);
            assert_eq!(decode_cyclic(&encoded_str), str);
        }
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_38_gen0.jsonl

Testing Rust/39 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn prime_fib(n: i32) -> i32 {



fn is_prime(num: i32) -> bool {
        if num <= 1 { return false; }
        if num <= 3 { return true; }
        if num % 2 == 0 || num % 3 == 0 { return false; }
        let mut i = 5;
        while i * i <= num {
            if num % i == 0 || num % (i + 2) == 0 { return false; }
            i += 6;
        }
        true
    }

    



fn fibonacci(n: i32) -> i32 {
        let (mut a, mut b, mut i) = (0, 1, 0);
        while i < n {
            let next = a + b;
            a = b;
            b = next;
            i += 1;
        }
        a
    }

    let mut count = 0;
    let mut index = 0;
    loop {
        let fib_num = fibonacci(index);
        if is_prime(fib_num) {
            count += 1;
            if count == n {
                return fib_num;
            }
        }
        index += 1;
    }
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_prime_fib() {
        assert_eq!(prime_fib(1), 2);
        assert_eq!(prime_fib(2), 3);
        assert_eq!(prime_fib(3), 5);
        assert_eq!(prime_fib(4), 13);
        assert_eq!(prime_fib(5), 89);
        assert_eq!(prime_fib(6), 233);
        assert_eq!(prime_fib(7), 1597);
        assert_eq!(prime_fib(8), 28657);
        assert_eq!(prime_fib(9), 514229);
        assert_eq!(prime_fib(10), 433494437);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/40 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn triples_sum_to_zero(nmbs:Vec<i32>) -> bool{

if nmbs.len() < 3 {
        return false;
    }

    let mut sorted_nmbs = nmbs.clone();
    sorted_nmbs.sort();

    for i in 0..sorted_nmbs.len() - 2 {
        if i > 0 && sorted_nmbs[i] == sorted_nmbs[i - 1] {
            continue;
        }

        let (mut left, mut right) = (i + 1, sorted_nmbs.len() - 1);
        while left < right {
            let sum = sorted_nmbs[i] + sorted_nmbs[left] + sorted_nmbs[right];
            if sum == 0 {
                return true;
            } else if sum < 0 {
                left += 1;
            } else {
                right -= 1;
            }
        }
    }

    false
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_triples_sum_to_zero() {
        assert!(triples_sum_to_zero(vec![1, 3, 5, 0]) == false);
        assert!(triples_sum_to_zero(vec![1, 3, 5, -1]) == false);
        assert!(triples_sum_to_zero(vec![1, 3, -2, 1]) == true);
        assert!(triples_sum_to_zero(vec![1, 2, 3, 7]) == false);
        assert!(triples_sum_to_zero(vec![1, 2, 5, 7]) == false);
        assert!(triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7]) == true);
        assert!(triples_sum_to_zero(vec![1]) == false);
        assert!(triples_sum_to_zero(vec![1, 3, 5, -100]) == false);
        assert!(triples_sum_to_zero(vec![100, 3, 5, -100]) == false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/41 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn car_race_collision(n:i32)-> i32{

n * n
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_car_race_collision() {
        assert!(car_race_collision(2) == 4);
        assert!(car_race_collision(3) == 9);
        assert!(car_race_collision(4) == 16);
        assert!(car_race_collision(8) == 64);
        assert!(car_race_collision(10) == 100);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/42 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn incr_list(l:Vec<i32>) -> Vec<i32>{

l.into_iter().map(|x| x + 1).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_incr_list() {
        assert!(incr_list(vec![]) == vec![]);
        assert!(incr_list(vec![3, 2, 1]) == [4, 3, 2]);
        assert!(incr_list(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/43 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn pairs_sum_to_zero(l:Vec<i32>) -> bool{

let mut seen = HashSet::new();
    for &num in &l {
        if seen.contains(&-num) {
            return true;
        }
        seen.insert(num);
    }
    false
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_pairs_sum_to_zero() {
        assert!(pairs_sum_to_zero(vec![1, 3, 5, 0]) == false);
        assert!(pairs_sum_to_zero(vec![1, 3, -2, 1]) == false);
        assert!(pairs_sum_to_zero(vec![1, 2, 3, 7]) == false);
        assert!(pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7]) == true);
        assert!(pairs_sum_to_zero(vec![1]) == false);
        assert!(pairs_sum_to_zero(vec![-3, 9, -1, 3, 2, 30]) == true);
        assert!(pairs_sum_to_zero(vec![-3, 9, -1, 3, 2, 31]) == true);
        assert!(pairs_sum_to_zero(vec![-3, 9, -1, 4, 2, 30]) == false);
        assert!(pairs_sum_to_zero(vec![-3, 9, -1, 4, 2, 31]) == false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/44 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn change_base(x:i32, base:i32) -> String{

if base < 2 || base > 9 {
        return String::from("Base must be between 2 and 9");
    }
    if x == 0 {
        return String::from("0");
    }
    let mut num = x.abs();
    let mut result = String::new();
    while num > 0 {
        let remainder = num % base;
        result.push_str(&remainder.to_string());
        num /= base;
    }
    if x < 0 {
        result.push('-');
    }
    result.chars().rev().collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_change_base() {
        assert!(change_base(8, 3) == "22".to_string());
        assert!(change_base(9, 3) == "100".to_string());
        assert!(change_base(234, 2) == "11101010".to_string());
        assert!(change_base(16, 2) == "10000".to_string());
        assert!(change_base(8, 2) == "1000".to_string());
        assert!(change_base(7, 2) == "111".to_string());
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/45 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn triangle_area(a:i32, h:i32) -> f64{

if a <= 0 || h <= 0 {
        return -1.0;
    }
    ((a as f64 * h as f64 / 2.0) * 100.0).round() / 100.0
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_triangle_area() {
        assert!(triangle_area(5, 3) == 7.5);
        assert!(triangle_area(2, 2) == 2.0);
        assert!(triangle_area(10, 8) == 40.0);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/46 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn fib4(n:i32) -> i32{

if n < 0 {
        return 0;
    }
    if n == 0 || n == 1 || n == 3 {
        return 0;
    }
    if n == 2 {
        return 2;
    }

    let mut fib = vec![0, 0, 2, 0];
    for i in 4..=n {
        let next = fib[(i-1) as usize] + fib[(i-2) as usize] + fib[(i-3) as usize] + fib[(i-4) as usize];
        fib.push(next);
    }
    fib[n as usize]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_fib4() {
        assert!(fib4(5) == 4);
        assert!(fib4(8) == 28);
        assert!(fib4(10) == 104);
        assert!(fib4(12) == 386);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/47 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn median(l:Vec<i32>) -> f64{

let mut sorted_l = l.clone();
    sorted_l.sort();
    let len = sorted_l.len();
    if len == 0 {
        return 0.0;
    }
    if len % 2 == 0 {
        (sorted_l[len / 2 - 1] as f64 + sorted_l[len / 2] as f64) / 2.0
    } else {
        sorted_l[len / 2] as f64
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_median() {
        assert!(median(vec![3, 1, 2, 4, 5]) == 3.0);
        assert!(median(vec![-10, 4, 6, 1000, 10, 20]) == 8.0);
        assert!(median(vec![5]) == 5.0);
        assert!(median(vec![6, 5]) == 5.5);
        assert!(median(vec![8, 1, 3, 9, 9, 2, 7]) == 7.0);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/48 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn is_palindrome(text: String) -> bool {

let cleaned_text: String = text.chars().filter(|c| c.is_alphanumeric()).map(|c| c.to_ascii_lowercase()).collect();
    cleaned_text == cleaned_text.chars().rev().collect::<String>()
}

#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn test_is_palindrome() {
        assert!(is_palindrome("".to_string()) == true);
        assert!(is_palindrome("aba".to_string()) == true);
        assert!(is_palindrome("aaaaa".to_string()) == true);
        assert!(is_palindrome("zbcd".to_string()) == false);
        assert!(is_palindrome("xywyx".to_string()) == true);
        assert!(is_palindrome("xywyz".to_string()) == false);
        assert!(is_palindrome("xywzx".to_string()) == false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/49 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn modp(n: i32, p: i32) -> i32 {

if p == 1 {
        return 0;
    }

    let mut result = 1;
    let mut base = 2;
    let mut exponent = n;
    let modulus = p;

    while exponent > 0 {
        if exponent % 2 == 1 {
            result = (result * base) % modulus;
        }
        base = (base * base) % modulus;
        exponent /= 2;
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_modp() {
        assert!(modp(3, 5) == 3);
        assert!(modp(1101, 101) == 2);
        assert!(modp(0, 101) == 1);
        assert!(modp(3, 11) == 8);
        assert!(modp(100, 101) == 1);
        assert!(modp(30, 5) == 4);
        assert!(modp(31, 5) == 3);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/50 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn encode_shift(s: &str) -> String {

    let alphabet:Vec<&str> = vec!["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"
    , "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
    let mut output = String::new();

    for c in s.chars() {
        let mut lower = false;
        if c.is_ascii_lowercase(){
            lower = true;
        }
        let mut c_shift:String = "".to_string();
        if lower {
            let index:usize = alphabet.iter().position(|&x| x == c.to_string()).unwrap();
            c_shift = alphabet[(index + 5) % 26].to_string();
        }else{
            let c_lower:String = c.to_ascii_lowercase().to_string();
            let index:usize = alphabet.iter().position(|&x| x == c_lower).unwrap();
            c_shift = alphabet[(index + 5) % 26].to_string();
            c_shift = c_shift.to_ascii_uppercase().to_string();
            
        }

        output.push_str(&c_shift);
    }
    output
}

pub fn decode_shift(s: &str) -> String {
let alphabet: Vec<char> = "abcdefghijklmnopqrstuvwxyz".chars().collect();
    let mut output = String::new();

    for c in s.chars() {
        if c.is_ascii_alphabetic() {
            let lower = c.is_ascii_lowercase();
            let c_lower = c.to_ascii_lowercase();
            let index: usize = alphabet.iter().position(|&x| x == c_lower).unwrap();
            let decoded_char = alphabet[(index + 21) % 26];
            if lower {
                output.push(decoded_char);
            } else {
                output.push(decoded_char.to_ascii_uppercase());
            }
        } else {
            output.push(c);
        }
    }
    output
}

fn encode_shift(s: &str) -> String {
    let alphabet: Vec<&str> = vec!["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
    let mut output = String::new();

    for c in s.chars() {
        let mut lower = false;
        if c.is_ascii_lowercase() {
            lower = true;
        }
        let mut c_shift: String = "".to_string();
        if lower {
            let index: usize = alphabet.iter().position(|&x| x == c.to_string()).unwrap();
            c_shift = alphabet[(index + 5) % 26].to_string();
        } else {
            let c_lower: String = c.to_ascii_lowercase().to_string();
            let index: usize = alphabet.iter().position(|&x| x == c_lower).unwrap();
            c_shift = alphabet[(index + 5) % 26].to_string();
            c_shift = c_shift.to_ascii_uppercase().to_string();
        }

        output.push_str(&c_shift);
    }
    output
}

pub 



#[cfg(test)]
mod tests {
    use super::*;

#[test]
    //Imposing that random characters that can be generated are solely from the alphabet
    fn test_decode_encode() {
        fn random_char() -> char {
            let mut rng = rand::thread_rng();
            let letter: char = match rng.gen_range(0, 2) {
                0 => rng.gen_range(b'a', b'z' + 1).into(),
                1 => rng.gen_range(b'A', b'Z' + 1).into(),
                _ => unreachable!(),
            };
            return letter;
        }

        let mut rng = rand::thread_rng();
        for _ in 0..100 {
            let r1: i32 = rng.gen();
            let l: i32 = 10 + r1 % 11;
            let mut str: String = "".to_string();

            for _ in 0..l {
                let chr: char = random_char();
                println!("{}", chr);
                str.push(chr);
            }

            let encoded_str: String = encode_shift(&str);
            assert!(decode_shift(&encoded_str) == str);
        }
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_50_gen0.jsonl

Testing Rust/51 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn remove_vowels(text: &str) -> String {

let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
    text.chars()
        .filter(|c| !vowels.contains(c) && !matches!(c, 'à' | 'é' | 'í' | 'ó' | 'ú' | 'À' | 'É' | 'Í' | 'Ó' | 'Ú' | 'ä' | 'ë' | 'ï' | 'ö' | 'ü' | 'Ä' | 'Ë' | 'Ï' | 'Ö' | 'Ü' | 'â' | 'ê' | 'î' | 'ô' | 'û' | 'Â' | 'Ê' | 'Î' | 'Ô' | 'Û' | 'ã' | 'õ' | 'Ã' | 'Õ' | 'å' | 'Å' | 'æ' | 'Æ' | 'ø' | 'Ø' | 'œ' | 'Œ' | 'ÿ' | 'Ÿ' | 'ý' | 'Ý' | 'ÿ' | 'Ÿ'))
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_remove_vowels() {
        assert!(remove_vowels("") == "");
        assert!(remove_vowels("abcdef\nghijklm") == "bcdf\nghjklm");
        assert!(remove_vowels("fedcba") == "fdcb");
        assert!(remove_vowels("eeeee") == "");
        assert!(remove_vowels("acBAA") == "cB");
        assert!(remove_vowels("EcBOO") == "cB");
        assert!(remove_vowels("ybcd") == "ybcd");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/52 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn below_threshold(l: Vec<i32>, t: i32) -> bool { 

for &num in l.iter() {
        if num >= t {
            return false;
        }
    }
    true
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_below_threshold() {
        assert!(below_threshold(vec![1, 2, 4, 10], 100));
        assert!(!below_threshold(vec![1, 20, 4, 10], 5));
        assert!(below_threshold(vec![1, 20, 4, 10], 21));
        assert!(below_threshold(vec![1, 20, 4, 10], 22));
        assert!(below_threshold(vec![1, 8, 4, 10], 11));
        assert!(!below_threshold(vec![1, 8, 4, 10], 10));
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/53 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn add(x:i32, y:i32) -> i32{

x + y
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_add() {
        assert!(add(0, 1) == 1);
        assert!(add(1, 0) == 1);
        assert!(add(2, 3) == 5);
        assert!(add(5, 7) == 12);
        assert!(add(7, 5) == 12);
        for _ in 0..100 {
            let mut rng = rand::thread_rng();
            let mut x: i32 = rng.gen();
            x = x % 1000;
            let mut y: i32 = rng.gen();
            y = y % 1000;

            assert!(add(x, y) == x + y);
        }
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/54 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn same_chars(str1:&str, str2:&str) -> bool{

let mut chars1: Vec<char> = str1.chars().collect();
    let mut chars2: Vec<char> = str2.chars().collect();
    chars1.sort_unstable();
    chars2.sort_unstable();
    chars1 == chars2
}

#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn test_same_chars() {
        assert!(same_chars("eabcdzzzz", "dddzzzzzzzddeddabc") == true);
        assert!(same_chars("abcd", "dddddddabc") == true);
        assert!(same_chars("dddddddabc", "abcd") == true);
        assert!(same_chars("eabcd", "dddddddabc") == false);
        assert!(same_chars("abcd", "dddddddabcf") == false);
        assert!(same_chars("eabcdzzzz", "dddzzzzzzzddddabc") == false);
        assert!(same_chars("aabb", "aaccc") == false);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_54_gen0.jsonl

Testing Rust/55 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn fib(n:i32) -> i32{

if n <= 0 {
        return 0;
    } else if n == 1 {
        return 1;
    }
    let mut a = 0;
    let mut b = 1;
    for _ in 2..=n {
        let temp = a + b;
        a = b;
        b = temp;
    }
    b
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_fib() {
        assert!(fib(10) == 55);
        assert!(fib(1) == 1);
        assert!(fib(8) == 21);
        assert!(fib(11) == 89);
        assert!(fib(12) == 144);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/56 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn correct_bracketing(bkts:&str) -> bool{

let mut balance = 0;
    for c in bkts.chars() {
        if c == '<' {
            balance += 1;
        } else if c == '>' {
            if balance == 0 {
                return false;
            }
            balance -= 1;
        }
    }
    balance == 0
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_correct_bracketing() {
        assert!(correct_bracketing("<>"));
        assert!(correct_bracketing("<<><>>"));
        assert!(correct_bracketing("<><><<><>><>"));
        assert!(correct_bracketing("<><><<<><><>><>><<><><<>>>"));
        assert!(!(correct_bracketing("<<<><>>>>")));
        assert!(!(correct_bracketing("><<>")));
        assert!(!(correct_bracketing("<")));
        assert!(!(correct_bracketing("<<<<")));
        assert!(!(correct_bracketing(">")));
        assert!(!(correct_bracketing("<<>")));
        assert!(!(correct_bracketing("<><><<><>><>><<>")));
        assert!(!(correct_bracketing("<><><<><>><>>><>")));
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/57 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn monotonic( l:Vec<i32>) -> bool{

if l.is_empty() {
        return true;
    }

    let mut increasing = true;
    let mut decreasing = true;

    for i in 1..l.len() {
        if l[i] < l[i - 1] {
            increasing = false;
        }
        if l[i] > l[i - 1] {
            decreasing = false;
        }
    }

    increasing || decreasing
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_monotonic() {
        assert!(monotonic(vec![1, 2, 4, 10]) == true);
        assert!(monotonic(vec![1, 2, 4, 20]) == true);
        assert!(monotonic(vec![1, 20, 4, 10]) == false);
        assert!(monotonic(vec![4, 1, 0, -10]) == true);
        assert!(monotonic(vec![4, 1, 1, 0]) == true);
        assert!(monotonic(vec![1, 2, 3, 2, 5, 60]) == false);
        assert!(monotonic(vec![1, 2, 3, 4, 5, 60]) == true);
        assert!(monotonic(vec![9, 9, 9, 9]) == true);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/58 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn common(l1:Vec<i32>, l2:Vec<i32>) -> Vec<i32>{

let set1: HashSet<i32> = l1.into_iter().collect();
    let set2: HashSet<i32> = l2.into_iter().collect();
    let mut result: Vec<i32> = set1.intersection(&set2).cloned().collect();
    result.sort();
    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_common() {
        assert!(
            common(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]) == vec![1, 5, 653]
        );
        assert!(common(vec![5, 3, 2, 8], vec![3, 2]) == vec![2, 3]);
        assert!(common(vec![4, 3, 2, 8], vec![3, 2, 4]) == vec![2, 3, 4]);
        assert!(common(vec![4, 3, 2, 8], vec![]) == vec![]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/59 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn largest_prime_factor(n:i32) -> i32{

let mut largest = -1;
    let mut nn = n as i64;
    let mut factor = 2;

    while nn % factor as i64 == 0 {
        largest = factor;
        nn /= factor as i64;
    }

    factor = 3;
    while factor * factor <= nn {
        while nn % factor as i64 == 0 {
            largest = factor;
            nn /= factor as i64;
        }
        factor += 2;
    }

    if nn > 1 {
        largest = nn as i32;
    }

    largest
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_largest_prime_factor() {
        assert!(largest_prime_factor(15) == 5);
        assert!(largest_prime_factor(27) == 3);
        assert!(largest_prime_factor(63) == 7);
        assert!(largest_prime_factor(330) == 11);
        assert!(largest_prime_factor(13195) == 29);
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_59_gen0.jsonl

Testing Rust/60 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sum_to_n(n: i32) -> i32 {

(1..=n).sum()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sum_to_n() {
        assert!(sum_to_n(1) == 1);
        assert!(sum_to_n(6) == 21);
        assert!(sum_to_n(11) == 66);
        assert!(sum_to_n(30) == 465);
        assert!(sum_to_n(100) == 5050);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/61 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn correct_bracketing_parenthesis(bkts:&str) -> bool{

fn correct_bracketing_parenthesis(bkts: &str) -> bool {
    let mut balance = 0;
    for c in bkts.chars() {
        if c == '(' {
            balance += 1;
        } else if c == ')' {
            balance -= 1;
        }
        if balance < 0 {
            return false;
        }
    }
    balance == 0
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_correct_bracketing_parenthesis() {
        assert!(correct_bracketing_parenthesis("()"));
        assert!(correct_bracketing_parenthesis("(()())"));
        assert!(correct_bracketing_parenthesis("()()(()())()"));
        assert!(correct_bracketing_parenthesis("()()((()()())())(()()(()))"));
        assert!(!(correct_bracketing_parenthesis("((()())))")));
        assert!(!(correct_bracketing_parenthesis(")(()")));
        assert!(!(correct_bracketing_parenthesis("(")));
        assert!(!(correct_bracketing_parenthesis("((((")));
        assert!(!(correct_bracketing_parenthesis(")")));
        assert!(!(correct_bracketing_parenthesis("(()")));
        assert!(!(correct_bracketing_parenthesis("()()(()())())(()")));
        assert!(!(correct_bracketing_parenthesis("()()(()())()))()")));
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_61_gen0.jsonl

Testing Rust/62 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn derivative(xs:Vec<i32>) -> Vec<i32>{

xs.into_iter().enumerate()
        .filter(|&(i, _)| i > 0)
        .map(|(i, coeff)| coeff * i as i32)
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_derivative() {
        assert!(derivative(vec![3, 1, 2, 4, 5]) == vec![1, 4, 12, 20]);
        assert!(derivative(vec![1, 2, 3]) == vec![2, 6]);
        assert!(derivative(vec![3, 2, 1]) == vec![2, 2]);
        assert!(derivative(vec![3, 2, 1, 0, 4]) == vec![2, 2, 0, 16]);
        assert!(derivative(vec![1]) == vec![]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/63 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn fibfib(n:i32) -> i32{

if n == 0 || n == 1 {
        return 0;
    } else if n == 2 {
        return 1;
    }

    let mut a = 0;
    let mut b = 0;
    let mut c = 1;
    let mut result = 0;

    for _ in 3..=n {
        result = a + b + c;
        a = b;
        b = c;
        c = result;
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_fibfib() {
        assert!(fibfib(2) == 1);
        assert!(fibfib(1) == 0);
        assert!(fibfib(5) == 4);
        assert!(fibfib(8) == 24);
        assert!(fibfib(10) == 81);
        assert!(fibfib(12) == 274);
        assert!(fibfib(14) == 927);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/64 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn vowels_count(s:&str) -> i32 {

let vowels = ['a', 'e', 'i', 'o', 'u'];
    let mut count = 0;
    let chars: Vec<char> = s.chars().collect();
    let length = chars.len();

    for (i, c) in chars.iter().enumerate() {
        let lower_c = c.to_ascii_lowercase();
        if vowels.contains(&lower_c) || (lower_c == 'y' && i == length - 1) {
            count += 1;
        }
    }

    count
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_vowels_count() {
        assert!(vowels_count("abcde") == 2);
        assert!(vowels_count("Alone") == 3);
        assert!(vowels_count("key") == 2);
        assert!(vowels_count("bye") == 1);
        assert!(vowels_count("keY") == 2);
        assert!(vowels_count("bYe") == 1);
        assert!(vowels_count("ACEDY") == 3);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/65 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn circular_shift(x:i32, shift:i32) -> String{

let mut digits: Vec<char> = x.to_string().chars().collect();
    let len = digits.len() as i32;
    
    if shift >= len {
        digits.reverse();
    } else {
        let shift = shift as usize;
        let split_point = len as usize - shift;
        let (left, right) = digits.split_at(split_point);
        digits = right.to_vec().into_iter().chain(left.to_vec().into_iter()).collect();
    }
    
    digits.into_iter().collect()
}

#[cfg(test)]
mod tests {
    use super::*;

 #[test]
    fn test_circular_shift() {
        assert!(circular_shift(100, 2) == "001");
        assert!(circular_shift(12, 8) == "12");
        // original test   asert (circular_shift(97, 8) == "79"); DATASET ERROR
        assert!(circular_shift(97, 8) == "97");
        assert!(circular_shift(12, 1) == "21");
        assert!(circular_shift(11, 101) == "11");
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_65_gen0.jsonl

Testing Rust/66 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn digitSum(s:&str) -> i32{

s.chars()
        .filter(|c| c.is_ascii_uppercase())
        .map(|c| c as i32)
        .sum()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_digitSum() {
        assert!(digitSum("") == 0);
        assert!(digitSum("abAB") == 131);
        assert!(digitSum("abcCd") == 67);
        assert!(digitSum("helloE") == 69);
        assert!(digitSum("woArBld") == 131);
        assert!(digitSum("aAaaaXa") == 153);
        assert!(digitSum(" How are yOu?") == 151);
        assert!(digitSum("You arE Very Smart") == 327);
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/67 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn fruit_distribution(s:&str, n:i32) -> i32 {

let re = Regex::new(r"(\d+)").unwrap();
    let mut numbers = re.find_iter(s).filter_map(|mat| mat.as_str().parse::<i32>().ok());
    let apples = numbers.next().unwrap_or(0);
    let oranges = numbers.next().unwrap_or(0);
    n - apples - oranges
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_fruit_distribution() {
        assert!(fruit_distribution("5 apples and 6 oranges", 19) == 8);
        assert!(fruit_distribution("5 apples and 6 oranges", 21) == 10);
        assert!(fruit_distribution("0 apples and 1 oranges", 3) == 2);
        assert!(fruit_distribution("1 apples and 0 oranges", 3) == 2);
        assert!(fruit_distribution("2 apples and 3 oranges", 100) == 95);
        assert!(fruit_distribution("2 apples and 3 oranges", 5) == 0);
        assert!(fruit_distribution("1 apples and 100 oranges", 120) == 19);
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/68 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn pluck(arr:Vec<i32>) -> Vec<i32> {

let mut smallest_even = None;
    let mut smallest_index = None;

    for (index, &value) in arr.iter().enumerate() {
        if value % 2 == 0 {
            match smallest_even {
                None => {
                    smallest_even = Some(value);
                    smallest_index = Some(index);
                },
                Some(current_smallest) => {
                    if value < current_smallest {
                        smallest_even = Some(value);
                        smallest_index = Some(index);
                    }
                }
            }
        }
    }

    match (smallest_even, smallest_index) {
        (Some(value), Some(index)) => vec![value, index as i32],
        _ => vec![],
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_pluck() {
        assert!(pluck(vec![4, 2, 3]) == vec![2, 1]);
        assert!(pluck(vec![1, 2, 3]) == vec![2, 1]);
        assert!(pluck(vec![]) == vec![]);
        assert!(pluck(vec![5, 0, 3, 0, 4, 2]) == vec![0, 1]);
        assert!(pluck(vec![1, 2, 3, 0, 5, 3]) == vec![0, 3]);
        assert!(pluck(vec![5, 4, 8, 4, 8]) == vec![4, 1]);
        assert!(pluck(vec![7, 6, 7, 1]) == vec![6, 1]);
        assert!(pluck(vec![7, 9, 7, 1]) == vec![]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/69 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn search(lst: Vec<i32>) -> i32 {

let mut frequency_map = HashMap::new();
    
    for &num in &lst {
        *frequency_map.entry(num).or_insert(0) += 1;
    }
    
    let mut result = -1;
    
    for (&num, &count) in frequency_map.iter() {
        if num > 0 && count >= num {
            result = cmp::max(result, num);
        }
    }
    
    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_search() {
        assert!(search(vec![5, 5, 5, 5, 1]) == 1);
        assert!(search(vec![4, 1, 4, 1, 4, 4]) == 4);
        assert!(search(vec![3, 3]) == -1);
        assert!(search(vec![8, 8, 8, 8, 8, 8, 8, 8]) == 8);
        assert!(search(vec![2, 3, 3, 2, 2]) == 2);
        assert!(
            search(vec![
                2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1
            ]) == 1
        );
        assert!(search(vec![3, 2, 8, 2]) == 2);
        assert!(search(vec![6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1);
        assert!(search(vec![8, 8, 3, 6, 5, 6, 4]) == -1);
        assert!(
            search(vec![
                6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9
            ]) == 1
        );
        assert!(search(vec![1, 9, 10, 1, 3]) == 1);
        assert!(
            search(vec![
                6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10
            ]) == 5
        );
        assert!(search(vec![1]) == 1);
        assert!(
            search(vec![
                8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5
            ]) == 4
        );
        assert!(
            search(vec![
                2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10
            ]) == 2
        );
        assert!(search(vec![1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1);
        assert!(
            search(vec![
                9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,
                10, 9, 4
            ]) == 4
        );
        assert!(
            search(vec![
                2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7
            ]) == 4
        );
        assert!(
            search(vec![
                9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1
            ]) == 2
        );
        assert!(
            search(vec![
                5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8
            ]) == -1
        );
        assert!(search(vec![10]) == -1);
        assert!(search(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2);
        assert!(search(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1);
        assert!(
            search(vec![
                7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6
            ]) == 1
        );
        assert!(search(vec![3, 10, 10, 9, 2]) == -1);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/70 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn strange_sort_list(lst: Vec<i32>) -> Vec<i32>{

if lst.is_empty() {
        return vec![];
    }
    if lst.len() == 1 {
        return lst;
    }

    let mut sorted_lst = lst.clone();
    sorted_lst.sort();
    let mut result = Vec::new();
    let mut left = 0;
    let mut right = sorted_lst.len() - 1;
    while left <= right {
        if left == right {
            result.push(sorted_lst[left]);
        } else {
            result.push(sorted_lst[left]);
            result.push(sorted_lst[right]);
        }
        left += 1;
        right -= 1;
    }
    result
}

#[cfg(test)]
mod tests {
    use super::*;

#[test]
    fn test_strange_sort_list() {
        assert!(strange_sort_list(vec![1, 2, 3, 4]) == vec![1, 4, 2, 3]);
        assert!(strange_sort_list(vec![5, 6, 7, 8, 9]) == vec![5, 9, 6, 8, 7]);
        assert!(strange_sort_list(vec![1, 2, 3, 4, 5]) == vec![1, 5, 2, 4, 3]);
        assert!(strange_sort_list(vec![5, 6, 7, 8, 9, 1]) == vec![1, 9, 5, 8, 6, 7]);
        assert!(strange_sort_list(vec![5, 5, 5, 5]) == vec![5, 5, 5, 5]);
        assert!(strange_sort_list(vec![]) == vec![]);
        assert!(strange_sort_list(vec![1, 2, 3, 4, 5, 6, 7, 8]) == vec![1, 8, 2, 7, 3, 6, 4, 5]);
        assert!(
            strange_sort_list(vec![0, 2, 2, 2, 5, 5, -5, -5]) == vec![-5, 5, -5, 5, 0, 2, 2, 2]
        );
        assert!(strange_sort_list(vec![111111]) == vec![111111]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/71 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn triangle_area_f64(a:f64, b:f64, c:f64) -> f64{

fn triangle_area_f64(a: f64, b: f64, c: f64) -> f64 {
    if a + b > c && a + c > b && b + c > a {
        let s = (a + b + c) / 2.0;
        let area = (s * (s - a) * (s - b) * (s - c)).sqrt();
        let rounded_area: f64 = format!("{:.2}", area).parse().unwrap();
        rounded_area
    } else {
        -1.0
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_triangle_area_f64() {
        assert!(f64::abs(triangle_area_f64(3.0, 4.0, 5.0) - 6.00) < 0.01);
        assert!(f64::abs(triangle_area_f64(1.0, 2.0, 10.0) + 1.0) < 0.01);
        assert!(f64::abs(triangle_area_f64(4.0, 8.0, 5.0) - 8.18) < 0.01);
        assert!(f64::abs(triangle_area_f64(2.0, 2.0, 2.0) - 1.73) < 0.01);
        assert!(f64::abs(triangle_area_f64(1.0, 2.0, 3.0) + 1.0) < 0.01);
        assert!(f64::abs(triangle_area_f64(10.0, 5.0, 7.0) - 16.25) < 0.01);
        assert!(f64::abs(triangle_area_f64(2.0, 6.0, 3.0) + 1.0) < 0.01);
        assert!(f64::abs(triangle_area_f64(1.0, 1.0, 1.0) - 0.43) < 0.01);
        assert!(f64::abs(triangle_area_f64(2.0, 2.0, 10.0) + 1.0) < 0.01);
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_71_gen0.jsonl

Testing Rust/72 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn will_it_fly(q:Vec<i32>, w:i32) -> bool{

let is_palindrome = q == q.iter().rev().cloned().collect::<Vec<i32>>();
    let total_weight: i32 = q.iter().sum();
    is_palindrome && total_weight <= w
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_will_it_fly() {
        assert!(will_it_fly(vec![3, 2, 3], 9) == true);
        assert!(will_it_fly(vec![1, 2], 5) == false);
        assert!(will_it_fly(vec![3], 5) == true);
        assert!(will_it_fly(vec![3, 2, 3], 1) == false);
        assert!(will_it_fly(vec![1, 2, 3], 6) == false);
        assert!(will_it_fly(vec![5], 5) == true);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/73 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn smallest_change(arr:Vec<i32>) -> i32{

let mut changes = 0;
    let n = arr.len();
    for i in 0..n / 2 {
        if arr[i] != arr[n - i - 1] {
            changes += 1;
        }
    }
    changes
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_smallest_change() {
        assert!(smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6]) == 4);
        assert!(smallest_change(vec![1, 2, 3, 4, 3, 2, 2]) == 1);
        assert!(smallest_change(vec![1, 4, 2]) == 1);
        assert!(smallest_change(vec![1, 4, 4, 2]) == 1);
        assert!(smallest_change(vec![1, 2, 3, 2, 1]) == 0);
        assert!(smallest_change(vec![3, 1, 1, 3]) == 0);
        assert!(smallest_change(vec![1]) == 0);
        assert!(smallest_change(vec![0, 1]) == 1);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/74 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn total_match(lst1:Vec<&str>, lst2:Vec<&str>) -> Vec<String>{

let total_chars_lst1: usize = lst1.iter().map(|s| s.len()).sum();
    let total_chars_lst2: usize = lst2.iter().map(|s| s.len()).sum();
    
    if total_chars_lst1 <= total_chars_lst2 {
        lst1.into_iter().map(|s| s.to_string()).collect()
    } else {
        lst2.into_iter().map(|s| s.to_string()).collect()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_total_match() {
        let v_empty: Vec<String> = vec![];
        assert!(total_match(vec![], vec![]) == v_empty);
        assert!(total_match(vec!["hi", "admin"], vec!["hi", "hi"]) == vec!["hi", "hi"]);
        assert!(
            total_match(vec!["hi", "admin"], vec!["hi", "hi", "admin", "project"])
                == vec!["hi", "admin"]
        );
        assert!(total_match(vec!["4"], vec!["1", "2", "3", "4", "5"]) == vec!["4"]);
        assert!(total_match(vec!["hi", "admin"], vec!["hI", "Hi"]) == vec!["hI", "Hi"]);
        assert!(total_match(vec!["hi", "admin"], vec!["hI", "hi", "hi"]) == vec!["hI", "hi", "hi"]);
        assert!(total_match(vec!["hi", "admin"], vec!["hI", "hi", "hii"]) == vec!["hi", "admin"]);
        assert!(total_match(vec![], vec!["this"]) == v_empty);
        assert!(total_match(vec!["this"], vec![]) == v_empty);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/75 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn is_multiply_prime(a: i32) -> bool {

if a < 2 {
        return false;
    }

    let mut primes = Vec::new();
    for i in 2..a {
        let mut is_prime = true;
        for j in 2..i {
            if i % j == 0 {
                is_prime = false;
                break;
            }
        }
        if is_prime {
            primes.push(i);
        }
    }

    for i in 0..primes.len() {
        for j in i + 1..primes.len() {
            for k in j + 1..primes.len() {
                if primes[i] * primes[j] * primes[k] == a {
                    return true;
                }
            }
        }
    }

    false
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_is_multiply_prime() {
        assert!(is_multiply_prime(5) == false);
        assert!(is_multiply_prime(30) == true);
        assert!(is_multiply_prime(8) == true);
        assert!(is_multiply_prime(10) == false);
        assert!(is_multiply_prime(125) == true);
        assert!(is_multiply_prime(3 * 5 * 7) == true);
        assert!(is_multiply_prime(3 * 6 * 7) == false);
        assert!(is_multiply_prime(9 * 9 * 9) == false);
        assert!(is_multiply_prime(11 * 9 * 9) == false);
        assert!(is_multiply_prime(11 * 13 * 7) == true);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_75_gen0.jsonl

Testing Rust/76 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn is_simple_power(x:i32, n:i32) -> bool{

if n == 0 {
        return x == 0; // 0^0 is considered 1, so 0^0 = 0 is true, and 0^k != 0 for k > 0
    }
    if n == 1 {
        return x == 1; // 1^k = 1 for any k
    }
    let mut power = 1;
    while power < x {
        power *= n;
    }
    power == x
}

#[cfg(test)]
mod tests {
    use super::*;

  #[test]
    fn test_is_simple_power() {
        assert!(is_simple_power(1, 4) == true);
        assert!(is_simple_power(2, 2) == true);
        assert!(is_simple_power(8, 2) == true);
        assert!(is_simple_power(3, 2) == false);
        assert!(is_simple_power(3, 1) == false);
        assert!(is_simple_power(5, 3) == false);
        assert!(is_simple_power(16, 2) == true);
        assert!(is_simple_power(143214, 16) == false);
        assert!(is_simple_power(4, 2) == true);
        assert!(is_simple_power(9, 3) == true);
        assert!(is_simple_power(16, 4) == true);
        assert!(is_simple_power(24, 2) == false);
        assert!(is_simple_power(128, 4) == false);
        assert!(is_simple_power(12, 6) == false);
        assert!(is_simple_power(1, 1) == true);
        assert!(is_simple_power(1, 12) == true);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/77 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn iscube(a:i32) -> bool{

let mut x = 0;
    while let Some(cube) = x.checked_mul(x).and_then(|x2| x2.checked_mul(x)) {
        if cube == a {
            return true;
        }
        if cube > a {
            break;
        }
        x += 1;
    }

    // Check for negative cubes
    let mut x = -1;
    while let Some(cube) = x.checked_mul(x).and_then(|x2| x2.checked_mul(x)) {
        if cube == a {
            return true;
        }
        if cube > a {
            break;
        }
        x -= 1;
    }

    false
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_iscube() {
        assert!(iscube(1) == true);
        assert!(iscube(2) == false);
        assert!(iscube(-1) == true);
        assert!(iscube(64) == true);
        assert!(iscube(180) == false);
        assert!(iscube(1000) == true);
        assert!(iscube(0) == true);
        assert!(iscube(1729) == false);
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_77_gen0.jsonl

Testing Rust/78 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn hex_key(num:&str) -> i32{

let prime_hex_digits: HashSet<char> = ['2', '3', '5', '7', 'B', 'D'].iter().cloned().collect();
    num.chars().filter(|c| prime_hex_digits.contains(c)).count() as i32
}

#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn test_hex_key() {
        assert!(hex_key("AB") == 1);
        assert!(hex_key("1077E") == 2);
        assert!(hex_key("ABED1A33") == 4);
        assert!(hex_key("2020") == 2);
        assert!(hex_key("123456789ABCDEF0") == 6);
        assert!(hex_key("112233445566778899AABBCCDDEEFF00") == 12);
        assert!(hex_key("") == 0);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/79 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn decimal_to_binary(decimal:i32) -> String{

if decimal >= 0 {
        format!("db{:b}db", decimal)
    } else {
        // Handle negative numbers using two's complement
        let binary = format!("{:032b}", decimal as u32);
        format!("db{}db", binary)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_decimal_to_binary() {
        assert!(decimal_to_binary(0) == "db0db".to_string());
        assert!(decimal_to_binary(32) == "db100000db".to_string());
        assert!(decimal_to_binary(103) == "db1100111db".to_string());
        assert!(decimal_to_binary(15) == "db1111db".to_string());
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/80 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn is_happy(s:&str) -> bool{

if s.len() < 3 {
        return false;
    }
    for i in 0..=s.len() - 3 {
        let chars: Vec<char> = s[i..i + 3].chars().collect();
        if chars[0] == chars[1] || chars[1] == chars[2] || chars[0] == chars[2] {
            return false;
        }
    }
    true
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_is_happy() {
        assert!(is_happy("a") == false);
        assert!(is_happy("aa") == false);
        assert!(is_happy("abcd") == true);
        assert!(is_happy("aabb") == false);
        assert!(is_happy("adb") == true);
        assert!(is_happy("xyy") == false);
        assert!(is_happy("iopaxpoi") == true);
        assert!(is_happy("iopaxioi") == false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/81 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn numerical_letter_grade(grades:Vec<f64>) -> Vec<String>{

grades.iter().map(|&gpa| {
        if gpa == 4.0 {
            "A+".to_string()
        } else if gpa >= 3.7 {
            "A".to_string()
        } else if gpa >= 3.3 {
            "A-".to_string()
        } else if gpa >= 3.0 {
            "B+".to_string()
        } else if gpa >= 2.7 {
            "B".to_string()
        } else if gpa >= 2.3 {
            "B-".to_string()
        } else if gpa >= 2.0 {
            "C+".to_string()
        } else if gpa >= 1.7 {
            "C".to_string()
        } else if gpa >= 1.3 {
            "C-".to_string()
        } else if gpa >= 1.0 {
            "D+".to_string()
        } else if gpa >= 0.7 {
            "D".to_string()
        } else if gpa > 0.0 {
            "D-".to_string()
        } else {
            "E".to_string()
        }
    }).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_numerical_letter_grade() {
        assert!(
            numerical_letter_grade(vec![4.0, 3.0, 1.7, 2.0, 3.5])
                == vec!["A+", "B", "C-", "C", "A-"]
        );
        assert!(numerical_letter_grade(vec![1.2]) == vec!["D+"]);
        assert!(numerical_letter_grade(vec![0.5]) == vec!["D-"]);
        assert!(numerical_letter_grade(vec![0.0]) == vec!["E"]);
        assert!(
            numerical_letter_grade(vec![1.0, 0.3, 1.5, 2.8, 3.3])
                == vec!["D", "D-", "C-", "B", "B+"]
        );
        assert!(numerical_letter_grade(vec![0.0, 0.7]) == vec!["E", "D-"]);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_81_gen0.jsonl

Testing Rust/82 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn prime_length(str:&str) -> bool{

let length = str.len();
    if length <= 1 {
        return false;
    }
    for i in 2..=((length as f64).sqrt() as usize) {
        if length % i == 0 {
            return false;
        }
    }
    true
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_prime_length() {
        assert!(prime_length("Hello") == true);
        assert!(prime_length("abcdcba") == true);
        assert!(prime_length("kittens") == true);
        assert!(prime_length("orange") == false);
        assert!(prime_length("wow") == true);
        assert!(prime_length("world") == true);
        assert!(prime_length("MadaM") == true);
        assert!(prime_length("Wow") == true);
        assert!(prime_length("") == false);
        assert!(prime_length("HI") == true);
        assert!(prime_length("go") == true);
        assert!(prime_length("gogo") == false);
        assert!(prime_length("aaaaaaaaaaaaaaa") == false);
        assert!(prime_length("Madam") == true);
        assert!(prime_length("M") == false);
        assert!(prime_length("0") == false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/83 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn starts_one_ends(n:i32) -> i32{

if n == 1 {
        return 1; // Only the number 1 itself
    }
    let starts_with_one = 10_i64.pow((n - 1) as u32);
    let ends_with_one = 10_i64.pow((n - 1) as u32) / 10;
    starts_with_one + ends_with_one - 1 // Subtract 1 to avoid double counting the number that starts and ends with 1
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_starts_one_ends() {
        assert!(starts_one_ends(1) == 1);
        assert!(starts_one_ends(2) == 18);
        assert!(starts_one_ends(3) == 180);
        assert!(starts_one_ends(4) == 1800);
        assert!(starts_one_ends(5) == 18000);
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_83_gen0.jsonl

Testing Rust/84 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn solve(n:i32) -> String{

let sum_of_digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as i32).sum::<i32>();
    format!("{:b}", sum_of_digits)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_solve() {
        assert!(solve(1000) == "1");
        assert!(solve(150) == "110");
        assert!(solve(147) == "1100");
        assert!(solve(333) == "1001");
        assert!(solve(963) == "10010");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/85 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn add_even_odd(lst: Vec<i32>) -> i32{

fn add_even_odd(lst: Vec<i32>) -> i32 {
    lst.iter().enumerate()
        .filter(|&(i, &x)| i % 2 != 0 && x % 2 == 0)
        .map(|(_, &x)| x)
        .sum()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_add_even_odd() {
        assert!(add_even_odd(vec![4, 88]) == 88);
        assert!(add_even_odd(vec![4, 5, 6, 7, 2, 122]) == 122);
        assert!(add_even_odd(vec![4, 0, 6, 7]) == 0);
        assert!(add_even_odd(vec![4, 4, 6, 8]) == 12);
    }


}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_85_gen0.jsonl

Testing Rust/86 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn anti_shuffle(s:&str) -> String{

s.split(' ')
     .map(|word| {
         let mut letters: Vec<char> = word.chars().filter(|c| c.is_alphabetic()).collect();
         letters.sort();
         let mut sorted_word = String::new();
         let mut letter_iter = letters.iter();
         for c in word.chars() {
             if c.is_alphabetic() {
                 if let Some(&letter) = letter_iter.next() {
                     sorted_word.push(letter);
                 }
             } else {
                 sorted_word.push(c);
             }
         }
         sorted_word
     })
     .collect::<Vec<String>>()
     .join(" ")
}

#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn test_anti_shuffle() {
        assert!(anti_shuffle("Hi") == "Hi".to_string());
        assert!(anti_shuffle("hello") == "ehllo".to_string());
        assert!(anti_shuffle("number") == "bemnru".to_string());
        assert!(anti_shuffle("abcd") == "abcd".to_string());
        assert!(anti_shuffle("Hello World!!!") == "Hello !!!Wdlor".to_string());
        assert!(anti_shuffle("") == "".to_string());
        assert!(
            anti_shuffle("Hi. My name is Mister Robot. How are you?")
                == ".Hi My aemn is Meirst .Rboot How aer ?ouy".to_string()
        );
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_86_gen0.jsonl

Testing Rust/87 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn get_row(lst:Vec<Vec<i32>>, x:i32) -> Vec<Vec<i32>>{

let mut result = Vec::new();

    for (row_index, row) in lst.iter().enumerate() {
        let mut row_matches = Vec::new();
        for (col_index, &value) in row.iter().enumerate() {
            if value == x {
                row_matches.push(col_index);
            }
        }
        if !row_matches.is_empty() {
            row_matches.sort_by(|a, b| b.cmp(a));
            for col_index in row_matches {
                result.push(vec![row_index as i32, col_index as i32]);
            }
        }
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_get_row() {
        assert!(
            get_row(
                vec![
                    vec![1, 2, 3, 4, 5, 6],
                    vec![1, 2, 3, 4, 1, 6],
                    vec![1, 2, 3, 4, 5, 1]
                ],
                1
            ) == vec![vec![0, 0], vec![1, 0], vec![1, 4], vec![2, 0], vec![2, 5]]
        );
        assert!(
            get_row(
                vec![
                    vec![1, 2, 3, 4, 5, 6],
                    vec![1, 2, 3, 4, 5, 6],
                    vec![1, 2, 3, 4, 5, 6],
                    vec![1, 2, 3, 4, 5, 6],
                    vec![1, 2, 3, 4, 5, 6],
                    vec![1, 2, 3, 4, 5, 6]
                ],
                2
            ) == vec![
                vec![0, 1],
                vec![1, 1],
                vec![2, 1],
                vec![3, 1],
                vec![4, 1],
                vec![5, 1]
            ]
        );
        assert!(
            get_row(
                vec![
                    vec![1, 2, 3, 4, 5, 6],
                    vec![1, 2, 3, 4, 5, 6],
                    vec![1, 1, 3, 4, 5, 6],
                    vec![1, 2, 1, 4, 5, 6],
                    vec![1, 2, 3, 1, 5, 6],
                    vec![1, 2, 3, 4, 1, 6],
                    vec![1, 2, 3, 4, 5, 1]
                ],
                1
            ) == vec![
                vec![0, 0],
                vec![1, 0],
                vec![2, 0],
                vec![2, 1],
                vec![3, 0],
                vec![3, 2],
                vec![4, 0],
                vec![4, 3],
                vec![5, 0],
                vec![5, 4],
                vec![6, 0],
                vec![6, 5]
            ]
        );
        let v: Vec<Vec<i32>> = vec![];
        assert!(get_row(vec![], 1) == v);
        assert!(get_row(vec![vec![1]], 2) == v);
        assert!(get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3) == vec![vec![2, 2]]);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_87_gen0.jsonl

Testing Rust/88 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sort_array(array:Vec<i32>) -> Vec<i32>{

let mut sorted_array = array.clone();
    sorted_array.sort_unstable_by(|a, b| {
        let ones_a = a.count_ones();
        let ones_b = b.count_ones();
        match ones_a.cmp(&ones_b) {
            Ordering::Equal => a.cmp(b),
            other => other,
        }
    });
    sorted_array
}

#[cfg(test)]
mod tests {
    use super::*;

  #[test]
    fn test_sort_array() {
        assert!(sort_array(vec![]) == vec![]);
        assert!(sort_array(vec![5]) == vec![5]);
        assert!(sort_array(vec![2, 4, 3, 0, 1, 5]) == vec![0, 1, 2, 3, 4, 5]);
        assert!(sort_array(vec![2, 4, 3, 0, 1, 5, 6]) == vec![6, 5, 4, 3, 2, 1, 0]);
        assert!(sort_array(vec![2, 1]) == vec![1, 2]);
        assert!(sort_array(vec![15, 42, 87, 32, 11, 0]) == vec![0, 11, 15, 32, 42, 87]);
        assert!(sort_array(vec![21, 14, 23, 11]) == vec![23, 21, 14, 11]);
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_88_gen0.jsonl

Testing Rust/89 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn encrypt(s:&str) -> String{

let shift = 2 * 2;
    s.chars()
        .map(|c| {
            if c.is_ascii_alphabetic() {
                let base = if c.is_ascii_lowercase() { 'a' } else { 'A' } as u8;
                let rotated = ((c as u8 - base + shift) % 26) + base;
                rotated as char
            } else {
                c
            }
        })
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_encrypt() {
        assert!(encrypt("hi") == "lm");
        assert!(encrypt("asdfghjkl") == "ewhjklnop");
        assert!(encrypt("gf") == "kj");
        assert!(encrypt("et") == "ix");
        assert!(encrypt("faewfawefaewg") == "jeiajeaijeiak");
        assert!(encrypt("hellomyfriend") == "lippsqcjvmirh");
        assert!(
            encrypt("dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh")
                == "hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"
        );
        assert!(encrypt("a") == "e");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/90 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn next_smallest(lst:Vec<i32>) -> i32{

use std::collections::HashSet;

    let mut unique_elements: HashSet<i32> = lst.into_iter().collect();
    let mut sorted_elements: Vec<i32> = unique_elements.into_iter().collect();
    if sorted_elements.len() < 2 {
        panic!("No second smallest element");
    }
    sorted_elements.sort();
    sorted_elements[1]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_next_smallest() {
        assert!(next_smallest(vec![1, 2, 3, 4, 5]) == 2);
        assert!(next_smallest(vec![5, 1, 4, 3, 2]) == 2);
        assert!(next_smallest(vec![]) == -1);
        assert!(next_smallest(vec![1, 1]) == -1);
        assert!(next_smallest(vec![1, 1, 1, 1, 0]) == 1);
        assert!(next_smallest(vec![-35, 34, 12, -45]) == -35);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_90_gen0.jsonl

Testing Rust/91 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn is_bored(s:&str) -> i32 {

let re = Regex::new(r"[.?!]\s*").unwrap();
    let sentences: Vec<&str> = re.split(s).collect();
    let mut count = 0;
    for sentence in sentences {
        let trimmed = sentence.trim();
        if trimmed.starts_with("I ") || trimmed == "I" {
            count += 1;
        }
    }
    count
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_is_bored() {
        assert!(is_bored("Hello world") == 0);
        assert!(is_bored("Is the sky blue?") == 0);
        assert!(is_bored("I love It !") == 1);
        assert!(is_bored("bIt") == 0);
        assert!(is_bored("I feel good today. I will be productive. will kill It") == 2);
        assert!(is_bored("You and I are going for a walk") == 0);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/92 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn any_int(a:f64, b:f64, c:f64) -> bool{

if a.fract() != 0.0 || b.fract() != 0.0 || c.fract() != 0.0 {
        return false;
    }
    a == b + c || b == a + c || c == a + b
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_any_int() {
        assert!(any_int(2.0, 3.0, 1.0) == true);
        assert!(any_int(2.5, 2.0, 3.0) == false);
        assert!(any_int(1.5, 5.0, 3.5) == false);
        assert!(any_int(2.0, 6.0, 2.0) == false);
        assert!(any_int(4.0, 2.0, 2.0) == true);
        assert!(any_int(2.2, 2.2, 2.2) == false);
        assert!(any_int(-4.0, 6.0, 2.0) == true);
        assert!(any_int(2.0, 1.0, 1.0) == true);
        assert!(any_int(3.0, 4.0, 7.0) == true);
        assert!(any_int(3.01, 4.0, 7.0) == false);
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/93 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn encode(message:&str) -> String{

let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
    let mut encoded_message = String::new();

    for c in message.chars() {
        // Swap case first
        let swapped_char = if c.is_ascii_lowercase() {
            c.to_ascii_uppercase()
        } else {
            c.to_ascii_lowercase()
        };

        // Replace vowels after swapping case
        let new_char = match swapped_char {
            'a' => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 'w',
            'A' => 'C', 'E' => 'G', 'I' => 'K', 'O' => 'Q', 'U' => 'W',
            _ => swapped_char,
        };

        encoded_message.push(new_char);
    }

    encoded_message
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_encode() {
        assert!(encode("TEST") == "tgst");
        assert!(encode("Mudasir") == "mWDCSKR");
        assert!(encode("YES") == "ygs");
        assert!(encode("This is a message") == "tHKS KS C MGSSCGG");
        assert!(encode("I DoNt KnOw WhAt tO WrItE") == "k dQnT kNqW wHcT Tq wRkTg");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/94 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn skjkasdkd(lst:Vec<i32>) -> i32{



fn is_prime(n: i32) -> bool {
        if n <= 1 { return false; }
        if n <= 3 { return true; }
        if n % 2 == 0 || n % 3 == 0 { return false; }
        let mut i = 5;
        while i * i <= n {
            if n % i == 0 || n % (i + 2) == 0 { return false; }
            i += 6;
        }
        true
    }

    let mut largest_prime = None;

    for &num in &lst {
        if is_prime(num) {
            largest_prime = Some(match largest_prime {
                Some(current_max) => cmp::max(current_max, num),
                None => num,
            });
        }
    }

    match largest_prime {
        Some(prime) => prime.to_string().chars().map(|c| c.to_digit(10).unwrap() as i32).sum(),
        None => 0,
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_skjkasdkd() {
        assert!(
            skjkasdkd(vec![
                0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3
            ]) == 10
        );
        assert!(
            skjkasdkd(vec![
                1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1
            ]) == 25
        );
        assert!(
            skjkasdkd(vec![
                1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3
            ]) == 13
        );
        assert!(skjkasdkd(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11);
        assert!(skjkasdkd(vec![0, 81, 12, 3, 1, 21]) == 3);
        assert!(skjkasdkd(vec![0, 8, 1, 2, 1, 7]) == 7);
        assert!(skjkasdkd(vec![8191]) == 19);
        assert!(skjkasdkd(vec![8191, 123456, 127, 7]) == 19);
        assert!(skjkasdkd(vec![127, 97, 8192]) == 10);
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/95 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn check_dict_case(dict:HashMap<&str, &str>) -> bool{

if dict.is_empty() {
        return false;
    }

    let mut all_lower = true;
    let mut all_upper = true;

    for key in dict.keys() {
        if !key.chars().all(|c| c.is_lowercase()) {
            all_lower = false;
        }
        if !key.chars().all(|c| c.is_uppercase()) {
            all_upper = false;
        }
    }

    all_lower || all_upper
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_check_dict_case() {
        assert!(check_dict_case(HashMap::from([("p", "pineapple"), ("b", "banana")])) == true);
        assert!(
            check_dict_case(HashMap::from([
                ("p", "pineapple"),
                ("A", "banana"),
                ("B", "banana")
            ])) == false
        );
        assert!(
            check_dict_case(HashMap::from([
                ("p", "pineapple"),
                ("5", "banana"),
                ("a", "apple")
            ])) == false
        );
        assert!(
            check_dict_case(HashMap::from([
                ("Name", "John"),
                ("Age", "36"),
                ("City", "Houston")
            ])) == false
        );
        assert!(check_dict_case(HashMap::from([("STATE", "NC"), ("ZIP", "12345")])) == true);
        assert!(check_dict_case(HashMap::from([("fruit", "Orange"), ("taste", "Sweet")])) == true);
        assert!(check_dict_case(HashMap::new()) == false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/96 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn count_up_to(n:i32) -> Vec<i32> {



fn is_prime(num: i32) -> bool {
        if num <= 1 {
            return false;
        }
        for i in 2..=((num as f64).sqrt() as i32) {
            if num % i == 0 {
                return false;
            }
        }
        true
    }

    let mut primes = Vec::new();
    for i in 2..n {
        if is_prime(i) {
            primes.push(i);
        }
    }
    primes
}

#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn test_count_up_to() {
        assert!(count_up_to(5) == vec![2, 3]);
        assert!(count_up_to(6) == vec![2, 3, 5]);
        assert!(count_up_to(7) == vec![2, 3, 5]);
        assert!(count_up_to(10) == vec![2, 3, 5, 7]);
        assert!(count_up_to(0) == vec![]);
        assert!(count_up_to(22) == vec![2, 3, 5, 7, 11, 13, 17, 19]);
        assert!(count_up_to(1) == vec![]);
        assert!(count_up_to(18) == vec![2, 3, 5, 7, 11, 13, 17]);
        assert!(count_up_to(47) == vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);
        assert!(
            count_up_to(101)
                == vec![
                    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,
                    79, 83, 89, 97
                ]
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/97 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn multiply(a:i32, b:i32) -> i32{

let unit_digit_a = a.abs() % 10;
    let unit_digit_b = b.abs() % 10;
    unit_digit_a * unit_digit_b
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_multiply() {
        assert!(multiply(148, 412) == 16);
        assert!(multiply(19, 28) == 72);
        assert!(multiply(2020, 1851) == 0);
        assert!(multiply(14, -15) == 20);
        assert!(multiply(76, 67) == 42);
        assert!(multiply(17, 27) == 49);
        assert!(multiply(0, 1) == 0);
        assert!(multiply(0, 0) == 0);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/98 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn count_upper(s:&str) -> i32 {

let vowels = ['A', 'E', 'I', 'O', 'U'];
    s.chars()
        .enumerate()
        .filter(|&(i, c)| i % 2 == 0 && vowels.contains(&c))
        .count() as i32
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_count_upper() {
        assert!(count_upper("aBCdEf") == 1);
        assert!(count_upper("abcdefg") == 0);
        assert!(count_upper("dBBE") == 0);
        assert!(count_upper("B") == 0);
        assert!(count_upper("U") == 1);
        assert!(count_upper("") == 0);
        assert!(count_upper("EEEE") == 2);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/99 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn closest_integer(value:&str) -> i32 {

let num: f64 = value.parse().unwrap();
    if num.fract() == 0.5 || num.fract() == -0.5 {
        if num > 0.0 {
            num.ceil() as i32
        } else {
            num.floor() as i32
        }
    } else {
        num.round() as i32
    }
}

#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn test_closest_integer() {
        assert!(closest_integer("10") == 10);
        assert!(closest_integer("14.5") == 15);
        assert!(closest_integer("-15.5") == -16);
        assert!(closest_integer("15.3") == 15);
        assert!(closest_integer("0") == 0);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/100 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn make_a_pile(n:i32) -> Vec<i32>{

let mut result = Vec::new();
    let mut current_stones = n;
    for _ in 0..n {
        result.push(current_stones);
        if n % 2 == 0 {
            current_stones += 2; // next even number
        } else {
            current_stones += 2; // next odd number
        }
    }
    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_make_a_pile() {
        assert!(make_a_pile(3) == vec![3, 5, 7]);
        assert!(make_a_pile(4) == vec![4, 6, 8, 10]);
        assert!(make_a_pile(5) == vec![5, 7, 9, 11, 13]);
        assert!(make_a_pile(6) == vec![6, 8, 10, 12, 14, 16]);
        assert!(make_a_pile(8) == vec![8, 10, 12, 14, 16, 18, 20, 22]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/101 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn words_string(s:&str) -> Vec<String> {

let re = Regex::new(r"[,\s]+").unwrap();
    re.split(s)
        .filter(|&word| !word.is_empty())
        .map(String::from)
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_words_string() {
        assert!(words_string("Hi, my name is John") == vec!["Hi", "my", "name", "is", "John"]);
        assert!(
            words_string("One, two, three, four, five, six")
                == vec!["One", "two", "three", "four", "five", "six"]
        );
        assert!(words_string("Hi, my name") == vec!["Hi", "my", "name"]);
        assert!(
            words_string("One,, two, three, four, five, six,")
                == vec!["One", "two", "three", "four", "five", "six"]
        );
        let v_empty: Vec<String> = vec![];
        assert!(words_string("") == v_empty);
        assert!(words_string("ahmed , gamal") == vec!["ahmed", "gamal"]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/102 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn choose_num(x:i32, y:i32) -> i32{

if x > y {
        return -1;
    }
    let mut max_even = -1;
    for num in x..=y {
        if num % 2 == 0 {
            max_even = cmp::max(max_even, num);
        }
    }
    max_even
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_choose_num() {
        assert!(choose_num(12, 15) == 14);
        assert!(choose_num(13, 12) == -1);
        assert!(choose_num(33, 12354) == 12354);
        assert!(choose_num(6, 29) == 28);
        assert!(choose_num(27, 10) == -1);
        assert!(choose_num(7, 7) == -1);
        assert!(choose_num(546, 546) == 546);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/103 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn rounded_avg(n:i32, m:i32) -> String{

if n > m {
        return "-1".to_string();
    }
    let sum: i32 = (n..=m).sum();
    let count: i32 = m - n + 1;
    let avg = (sum as f64 / count as f64).round() as i32;
    format!("{:b}", avg)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_rounded_avg() {
        assert!(rounded_avg(1, 5) == "11");
        assert!(rounded_avg(7, 13) == "1010");
        assert!(rounded_avg(964, 977) == "1111001010");
        assert!(rounded_avg(996, 997) == "1111100100");
        assert!(rounded_avg(560, 851) == "1011000001");
        assert!(rounded_avg(185, 546) == "101101101");
        assert!(rounded_avg(362, 496) == "110101101");
        assert!(rounded_avg(350, 902) == "1001110010");
        assert!(rounded_avg(197, 233) == "11010111");
        assert!(rounded_avg(7, 5) == "-1");
        assert!(rounded_avg(5, 1) == "-1");
        assert!(rounded_avg(5, 5) == "101");
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_103_gen0.jsonl

Testing Rust/104 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn unique_digits(x:Vec<i32>) -> Vec<i32>{

let mut unique_numbers: HashSet<i32> = x.into_iter()
        .filter(|&num| !num.to_string().chars().any(|c| c.to_digit(10).unwrap() % 2 == 0))
        .collect();
    let mut result: Vec<i32> = unique_numbers.into_iter().collect();
    result.sort_unstable();
    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_unique_digits() {
        assert!(unique_digits(vec![15, 33, 1422, 1]) == vec![1, 15, 33]);
        assert!(unique_digits(vec![152, 323, 1422, 10]) == vec![]);
        assert!(unique_digits(vec![12345, 2033, 111, 151]) == vec![111, 151]);
        assert!(unique_digits(vec![135, 103, 31]) == vec![31, 135]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/105 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn by_length(arr:Vec<i32>) -> Vec<String>{

let digit_names = ["One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"];
    arr.into_iter()
        .filter(|&x| x >= 1 && x <= 9)
        .collect::<Vec<i32>>()
        .sort_unstable()
        .reverse()
        .into_iter()
        .map(|x| digit_names[(x - 1) as usize].to_string())
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_by_length() {
        assert!(
            by_length(vec![2, 1, 1, 4, 5, 8, 2, 3])
                == vec!["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
        );
        let v_empty: Vec<String> = vec![];
        assert!(by_length(vec![]) == v_empty);
        assert!(by_length(vec![1, -1, 55]) == vec!["One"]);
        assert!(by_length(vec![1, -1, 3, 2]) == vec!["Three", "Two", "One"]);
        assert!(by_length(vec![9, 4, 8]) == vec!["Nine", "Eight", "Four"]);
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_105_gen0.jsonl

Testing Rust/106 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn f(n:i32) -> Vec<i32>{

let mut result = Vec::new();
    for i in 1..=n {
        if i % 2 == 0 {
            // Calculate factorial for even i
            let mut factorial = 1;
            for j in 1..=i {
                factorial *= j;
            }
            result.push(factorial);
        } else {
            // Calculate sum for odd i
            let sum = (1 + i) * i / 2;
            result.push(sum);
        }
    }
    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_f() {
        assert!(f(5) == vec![1, 2, 6, 24, 15]);
        assert!(f(7) == vec![1, 2, 6, 24, 15, 720, 28]);
        assert!(f(1) == vec![1]);
        assert!(f(3) == vec![1, 2, 6]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/107 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn even_odd_palindrome(n: i32) -> (i32, i32) {

let mut even_count = 0;
    let mut odd_count = 0;

    for i in 1..=n {
        if is_palindrome(i) {
            if i % 2 == 0 {
                even_count += 1;
            } else {
                odd_count += 1;
            }
        }
    }

    (even_count, odd_count)
}

fn is_palindrome(num: i32) -> bool {
    let s = num.to_string();
    s.chars().eq(s.chars().rev())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_even_odd_palindrome() {
        assert!(even_odd_palindrome(123) == (8, 13));
        assert!(even_odd_palindrome(12) == (4, 6));
        assert!(even_odd_palindrome(3) == (1, 2));
        assert!(even_odd_palindrome(63) == (6, 8));
        assert!(even_odd_palindrome(25) == (5, 6));
        assert!(even_odd_palindrome(19) == (4, 6));
        assert!(even_odd_palindrome(9) == (4, 5));
        assert!(even_odd_palindrome(1) == (0, 1));
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/108 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn count_nums(n:Vec<i32>) -> i32{

n.iter()
        .filter(|&&num| {
            let sum: i32 = num.to_string()
                              .chars()
                              .filter_map(|c| c.to_digit(10).map(|d| d as i32))
                              .sum();
            (if num < 0 {
                sum - 2 * (num.to_string().chars().nth(1).unwrap().to_digit(10).unwrap() as i32)
            } else {
                sum
            }) > 0
        })
        .count() as i32
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_count_nums() {
        assert!(count_nums(vec![]) == 0);
        assert!(count_nums(vec![-1, -2, 0]) == 0);
        assert!(count_nums(vec![1, 1, 2, -2, 3, 4, 5]) == 6);
        assert!(count_nums(vec![1, 6, 9, -6, 0, 1, 5]) == 5);
        assert!(count_nums(vec![1, 100, 98, -7, 1, -1]) == 4);
        assert!(count_nums(vec![12, 23, 34, -45, -56, 0]) == 5);
        assert!(count_nums(vec![-0, 1]) == 1);
        assert!(count_nums(vec![1]) == 1);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/109 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn move_one_ball(arr:Vec<i32>) -> bool{

if arr.is_empty() {
        return true;
    }

    let n = arr.len();
    let mut sorted_arr = arr.clone();
    sorted_arr.sort();

    for i in 0..n {
        let mut rotated = arr[i..].to_vec();
        rotated.extend_from_slice(&arr[..i]);
        if rotated == sorted_arr {
            return true;
        }
    }

    false
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_move_one_ball() {
        assert!(move_one_ball(vec![3, 4, 5, 1, 2]) == true);
        assert!(move_one_ball(vec![3, 5, 10, 1, 2]) == true);
        assert!(move_one_ball(vec![4, 3, 1, 2]) == false);
        assert!(move_one_ball(vec![3, 5, 4, 1, 2]) == false);
        assert!(move_one_ball(vec![]) == true);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/110 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn exchange(lst1:Vec<i32>, lst2:Vec<i32>) -> String{

let has_odd_in_lst1 = lst1.iter().any(|&x| x % 2 != 0);
    let has_even_in_lst2 = lst2.iter().any(|&x| x % 2 == 0);

    if has_odd_in_lst1 && has_even_in_lst2 {
        "YES".to_string()
    } else if !has_odd_in_lst1 {
        "YES".to_string()
    } else {
        "NO".to_string()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_exchange() {
        assert!(exchange(vec![1, 2, 3, 4], vec![1, 2, 3, 4]) == "YES");
        assert!(exchange(vec![1, 2, 3, 4], vec![1, 5, 3, 4]) == "NO");
        assert!(exchange(vec![1, 2, 3, 4], vec![2, 1, 4, 3]) == "YES");
        assert!(exchange(vec![5, 7, 3], vec![2, 6, 4]) == "YES");
        assert!(exchange(vec![5, 7, 3], vec![2, 6, 3]) == "NO");
        assert!(exchange(vec![3, 2, 6, 1, 8, 9], vec![3, 5, 5, 1, 1, 1]) == "NO");
        assert!(exchange(vec![100, 200], vec![200, 200]) == "YES");
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_110_gen0.jsonl

Testing Rust/111 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn histogram(test:&str) -> HashMap<char, i32>{

let mut counts = HashMap::new();
    for c in test.chars().filter(|c| c.is_alphabetic()) {
        *counts.entry(c).or_insert(0) += 1;
    }
    let max_count = counts.values().cloned().max().unwrap_or(0);
    counts.into_iter().filter(|&(_, v)| v == max_count).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_histogram() {
        assert!(histogram("a b b a") == HashMap::from([('a', 2), ('b', 2)]));
        assert!(histogram("a b c a b") == HashMap::from([('a', 2), ('b', 2)]));
        assert!(
            histogram("a b c d g")
                == HashMap::from([('a', 1), ('b', 1), ('c', 1), ('d', 1), ('g', 1)])
        );
        assert!(histogram("r t g") == HashMap::from([('r', 1), ('t', 1), ('g', 1)]));
        assert!(histogram("b b b b a") == HashMap::from([('b', 4)]));
        assert!(histogram("r t g") == HashMap::from([('r', 1), ('t', 1), ('g', 1)]));
        assert!(histogram("") == HashMap::new());
        assert!(histogram("a") == HashMap::from([(('a', 1))]));
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/112 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn reverse_delete(s:&str, c:&str) -> Vec<String> {

let chars_to_remove: HashSet<char> = c.chars().collect();
    let filtered: String = s.chars().filter(|ch| !chars_to_remove.contains(ch)).collect();
    let is_palindrome = filtered.chars().eq(filtered.chars().rev());
    vec![filtered, is_palindrome.to_string()]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_reverse_delete() {
        assert!(reverse_delete("abcde", "ae") == ["bcd", "False"]);
        assert!(reverse_delete("abcdef", "b") == ["acdef", "False"]);
        assert!(reverse_delete("abcdedcba", "ab") == ["cdedc", "True"]);
        assert!(reverse_delete("dwik", "w") == ["dik", "False"]);
        assert!(reverse_delete("a", "a") == ["", "True"]);
        assert!(reverse_delete("abcdedcba", "") == ["abcdedcba", "True"]);
        assert!(reverse_delete("abcdedcba", "v") == ["abcdedcba", "True"]);
        assert!(reverse_delete("vabba", "v") == ["abba", "True"]);
        assert!(reverse_delete("mamma", "mia") == ["", "True"]);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_112_gen0.jsonl

Testing Rust/113 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn odd_count(lst:Vec<&str>) -> Vec<String>{

lst.iter().map(|s| {
        let count = s.chars().filter(|&c| c.is_digit(10) && c.to_digit(10).unwrap() % 2 != 0).count();
        format!("the number of odd elements {}n the str{}ng {}", count, count, count)
    }).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_odd_count() {
        assert!(
            odd_count(vec!["1234567"])
                == ["the number of odd elements 4n the str4ng 4 of the 4nput."]
        );
        assert!(
            odd_count(vec!["3", "11111111"])
                == [
                    "the number of odd elements 1n the str1ng 1 of the 1nput.",
                    "the number of odd elements 8n the str8ng 8 of the 8nput."
                ]
        );
        assert!(
            odd_count(vec!["271", "137", "314"])
                == [
                    "the number of odd elements 2n the str2ng 2 of the 2nput.",
                    "the number of odd elements 3n the str3ng 3 of the 3nput.",
                    "the number of odd elements 2n the str2ng 2 of the 2nput."
                ]
        );
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_113_gen0.jsonl

Testing Rust/114 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn min_sub_array_sum(nums: Vec<i64>) -> i64 {

let mut min_sum = nums[0];
    let mut current_sum = nums[0];

    for &num in nums.iter().skip(1) {
        current_sum = cmp::min(num, current_sum + num);
        min_sum = cmp::min(min_sum, current_sum);
    }

    min_sum
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_min_sub_array_sum() {
        assert!(min_sub_array_sum(vec![2, 3, 4, 1, 2, 4]) == 1);
        assert!(min_sub_array_sum(vec![-1, -2, -3]) == -6);
        assert!(min_sub_array_sum(vec![-1, -2, -3, 2, -10]) == -14);
        assert!(min_sub_array_sum(vec![-9999999999999999]) == -9999999999999999);
        assert!(min_sub_array_sum(vec![0, 10, 20, 1000000]) == 0);
        assert!(min_sub_array_sum(vec![-1, -2, -3, 10, -5]) == -6);
        assert!(min_sub_array_sum(vec![100, -1, -2, -3, 10, -5]) == -6);
        assert!(min_sub_array_sum(vec![10, 11, 13, 8, 3, 4]) == 3);
        assert!(min_sub_array_sum(vec![100, -33, 32, -1, 0, -2]) == -33);
        assert!(min_sub_array_sum(vec![-10]) == -10);
        assert!(min_sub_array_sum(vec![7]) == 7);
        assert!(min_sub_array_sum(vec![1, -1]) == -1);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/115 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn max_fill(grid:Vec<Vec<i32>>, capacity:i32) -> i32{

let mut total_water = 0;
    for row in grid.iter() {
        total_water += row.iter().filter(|&&cell| cell == 1).count() as i32;
    }
    (total_water + capacity - 1) / capacity
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_max_fill() {
        assert!(
            max_fill(
                vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]],
                1
            ) == 6
        );
        assert!(
            max_fill(
                vec![
                    vec![0, 0, 1, 1],
                    vec![0, 0, 0, 0],
                    vec![1, 1, 1, 1],
                    vec![0, 1, 1, 1]
                ],
                2
            ) == 5
        );
        assert!(max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5) == 0);
        assert!(max_fill(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 2) == 4);
        assert!(max_fill(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 9) == 2);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_115_gen0.jsonl

Testing Rust/116 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sort_array_1(arr:Vec<i32>) -> Vec<i32>{

fn sort_array_1(arr: Vec<i32>) -> Vec<i32> {
    let mut arr = arr;
    arr.sort_unstable_by(|a, b| {
        let ones_a = a.count_ones();
        let ones_b = b.count_ones();
        ones_a.cmp(&ones_b).then(a.cmp(b))
    });
    arr
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sort_array_1() {
        assert!(sort_array_1(vec![1, 5, 2, 3, 4]) == vec![1, 2, 4, 3, 5]);
        assert!(sort_array_1(vec![-2, -3, -4, -5, -6]) == vec![-4, -2, -6, -5, -3]);
        assert!(sort_array_1(vec![1, 0, 2, 3, 4]) == vec![0, 1, 2, 4, 3]);
        assert!(sort_array_1(vec![]) == vec![]);
        assert!(
            sort_array_1(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])
                == vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
        );
        assert!(sort_array_1(vec![3, 6, 44, 12, 32, 5]) == vec![32, 3, 5, 6, 12, 44]);
        assert!(sort_array_1(vec![2, 4, 8, 16, 32]) == vec![2, 4, 8, 16, 32]);
        assert!(sort_array_1(vec![2, 4, 8, 16, 32]) == vec![2, 4, 8, 16, 32]);
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_116_gen0.jsonl

Testing Rust/117 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn select_words(s:&str, n:i32) -> Vec<String>{

let consonants = "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ";
    s.split_whitespace()
        .filter(|word| word.chars().filter(|c| consonants.contains(*c)).count() as i32 == n)
        .map(String::from)
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_select_words() {
        assert_eq!(select_words("Mary had a little lamb", 4), vec!["little"]);
        assert_eq!(
            select_words("Mary had a little lamb", 3),
            vec!["Mary", "lamb"]
        );
        let v_empty: Vec<&str> = vec![];
        assert_eq!(select_words("simple white space", 2), v_empty);
        assert_eq!(select_words("Hello world", 4), vec!["world"]);
        assert_eq!(select_words("Uncle sam", 3), vec!["Uncle"]);
        assert_eq!(select_words("", 4), v_empty);
        assert_eq!(select_words("a b c d e f", 1), vec!["b", "c", "d", "f"]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/118 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn get_closest_vowel(word: &str) -> String {

let vowels: HashSet<char> = "aeiouAEIOU".chars().collect();
    let mut closest_vowel = None;

    for (i, window) in word.as_bytes().windows(3).enumerate() {
        if !vowels.contains(&(window[0] as char)) && vowels.contains(&(window[1] as char)) && !vowels.contains(&(window[2] as char)) {
            closest_vowel = Some(window[1] as char);
        }
    }

    closest_vowel.map_or_else(|| String::new(), |v| v.to_string())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_get_closest_vowel() {
        assert_eq!(get_closest_vowel("yogurt"), "u");
        assert_eq!(get_closest_vowel("full"), "u");
        assert_eq!(get_closest_vowel("easy"), "");
        assert_eq!(get_closest_vowel("eAsy"), "");
        assert_eq!(get_closest_vowel("ali"), "");
        assert_eq!(get_closest_vowel("bad"), "a");
        assert_eq!(get_closest_vowel("most"), "o");
        assert_eq!(get_closest_vowel("ab"), "");
        assert_eq!(get_closest_vowel("ba"), "");
        assert_eq!(get_closest_vowel("quick"), "");
        assert_eq!(get_closest_vowel("anime"), "i");
        assert_eq!(get_closest_vowel("Asia"), "");
        assert_eq!(get_closest_vowel("Above"), "o");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/119 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn match_parens(lst: Vec<&str>) -> &str {



fn calculate_balance_and_open(s: &str) -> (i32, i32) {
        let mut balance = 0;
        let mut open = 0;
        for c in s.chars() {
            if c == '(' {
                open += 1;
            } else {
                if open > 0 {
                    open -= 1;
                } else {
                    balance -= 1;
                }
            }
        }
        (balance, open)
    }

    let (balance1, open1) = calculate_balance_and_open(lst[0]);
    let (balance2, open2) = calculate_balance_and_open(lst[1]);

    if (balance1 + open2 == 0 && balance2 == 0) || (balance2 + open1 == 0 && balance1 == 0) {
        "Yes"
    } else {
        "No"
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_match_parens() {
        assert_eq!(match_parens(vec!["()(", ")"]), "Yes");
        assert_eq!(match_parens(vec![")", ")"]), "No");
        assert_eq!(match_parens(vec!["(()(())", "())())"],), "No");
        assert_eq!(match_parens(vec![")())", "(()()("]), "Yes");
        assert_eq!(match_parens(vec!["(())))", "(()())(("]), "Yes");
        assert_eq!(match_parens(vec!["()", "())"],), "No");
        assert_eq!(match_parens(vec!["(()(", "()))()"]), "Yes");
        assert_eq!(match_parens(vec!["((((", "((())"],), "No");
        assert_eq!(match_parens(vec![")(()", "(()("]), "No");
        assert_eq!(match_parens(vec![")(", ")("]), "No");
        assert_eq!(match_parens(vec!["(", ")"]), "Yes");
        assert_eq!(match_parens(vec![")", "("]), "Yes");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/120 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn maximum_120(arr: Vec<i32>, k: i32) -> Vec<i32> {

fn maximum_120(arr: Vec<i32>, k: i32) -> Vec<i32> {
    let mut sorted_arr = arr.clone();
    sorted_arr.sort();
    sorted_arr.into_iter().rev().take(k as usize).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_maximum_120() {
        assert_eq!(maximum_120(vec![-3, -4, 5], 3), vec![-4, -3, 5]);
        assert_eq!(maximum_120(vec![4, -4, 4], 2), vec![4, 4]);
        assert_eq!(maximum_120(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);
        assert_eq!(
            maximum_120(vec![123, -123, 20, 0, 1, 2, -3], 3),
            vec![2, 20, 123]
        );
        assert_eq!(
            maximum_120(vec![-123, 20, 0, 1, 2, -3], 4),
            vec![0, 1, 2, 20]
        );
        assert_eq!(
            maximum_120(vec![5, 15, 0, 3, -13, -8, 0], 7),
            vec![-13, -8, 0, 0, 3, 5, 15]
        );
        assert_eq!(maximum_120(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);
        assert_eq!(maximum_120(vec![1, 0, 5, -7], 1), vec![5]);
        assert_eq!(maximum_120(vec![4, -4], 2), vec![-4, 4]);
        assert_eq!(maximum_120(vec![-10, 10], 2), vec![-10, 10]);
        assert_eq!(maximum_120(vec![1, 2, 3, -23, 243, -400, 0], 0), vec![]);
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_120_gen0.jsonl

Testing Rust/121 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn solutions(lst: Vec<i32>) -> i32 {

fn solutions(lst: Vec<i32>) -> i32 {
    lst.iter().enumerate().filter(|&(i, &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_solutions() {
        assert_eq!(solutions(vec![5, 8, 7, 1]), 12);
        assert_eq!(solutions(vec![3, 3, 3, 3, 3]), 9);
        assert_eq!(solutions(vec![30, 13, 24, 321]), 0);
        assert_eq!(solutions(vec![5, 9]), 5);
        assert_eq!(solutions(vec![2, 4, 8]), 0);
        assert_eq!(solutions(vec![30, 13, 23, 32]), 23);
        assert_eq!(solutions(vec![3, 13, 2, 9]), 3);
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_121_gen0.jsonl

Testing Rust/122 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn add_elements(arr: Vec<i32>, k: i32) -> i32 {

arr.iter()
        .take(k as usize)
        .filter(|&&x| x >= -99 && x <= 99)
        .sum()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_add_elements() {
        assert_eq!(add_elements(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);
        assert_eq!(add_elements(vec![111, 121, 3, 4000, 5, 6], 2), 0);
        assert_eq!(add_elements(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);
        assert_eq!(add_elements(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);
        assert_eq!(add_elements(vec![1], 1), 1);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/123 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn get_odd_collatz(n: i32) -> Vec<i32> {

let mut sequence = Vec::new();
    let mut current = n;

    while current != 1 {
        if current % 2 != 0 {
            sequence.push(current);
        }
        if current % 2 == 0 {
            current /= 2;
        } else {
            current = 3 * current + 1;
        }
    }
    sequence.push(1); // Include 1 as it is part of the sequence and odd

    let mut filtered_sequence: Vec<i32> = sequence.into_iter().filter(|&x| x % 2 != 0).collect();
    filtered_sequence.sort_unstable();
    filtered_sequence
}

#[cfg(test)]
mod tests {
    use super::*;

   #[test]
    fn test_get_odd_collatz() {
        assert_eq!(get_odd_collatz(14), vec![1, 5, 7, 11, 13, 17]);
        assert_eq!(get_odd_collatz(5), vec![1, 5]);
        assert_eq!(get_odd_collatz(12), vec![1, 3, 5]);
        assert_eq!(get_odd_collatz(1), vec![1]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/124 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn valid_date(date: &str) -> bool {

if date.is_empty() {
        return false;
    }

    let re = Regex::new(r"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4}$").unwrap();
    if !re.is_match(date) {
        return false;
    }

    let parts: Vec<&str> = date.split('-').collect();
    let month = parts[0].parse::<u32>().unwrap();
    let day = parts[1].parse::<u32>().unwrap();

    match month {
        1 | 3 | 5 | 7 | 8 | 10 | 12 => day <= 31,
        4 | 6 | 9 | 11 => day <= 30,
        2 => day <= 29,
        _ => false,
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_valid_date() {
        assert_eq!(valid_date("03-11-2000"), true);
        assert_eq!(valid_date("15-01-2012"), false);
        assert_eq!(valid_date("04-0-2040"), false);
        assert_eq!(valid_date("06-04-2020"), true);
        assert_eq!(valid_date("01-01-2007"), true);
        assert_eq!(valid_date("03-32-2011"), false);
        assert_eq!(valid_date(""), false);
        assert_eq!(valid_date("04-31-3000"), false);
        assert_eq!(valid_date("06-06-2005"), true);
        assert_eq!(valid_date("21-31-2000"), false);
        assert_eq!(valid_date("04-12-2003"), true);
        assert_eq!(valid_date("04122003"), false);
        assert_eq!(valid_date("20030412"), false);
        assert_eq!(valid_date("2003-04"), false);
        assert_eq!(valid_date("2003-04-12"), false);
        assert_eq!(valid_date("04-2003"), false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/125 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn split_words(txt: &str) -> Vec<String> {

if txt.contains(' ') {
        txt.split_whitespace().map(|s| s.to_string()).collect()
    } else if txt.contains(',') {
        txt.split(',').filter(|s| !s.is_empty()).map(|s| s.to_string()).collect()
    } else {
        let odd_order_count = txt.chars().filter(|&c| c.is_ascii_lowercase() && (c as u8 - b'a') % 2 == 1).count();
        vec![odd_order_count.to_string()]
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_split_words() {
        assert_eq!(split_words("Hello world!"), vec!["Hello", "world!"]);
        assert_eq!(split_words("Hello,world!"), vec!["Hello", "world!"]);
        assert_eq!(split_words("Hello world,!"), vec!["Hello", "world,!"]);
        assert_eq!(
            split_words("Hello,Hello,world !"),
            vec!["Hello,Hello,world", "!"]
        );
        assert_eq!(split_words("abcdef"), vec!["3"]);
        assert_eq!(split_words("aaabb"), vec!["2"]);
        assert_eq!(split_words("aaaBb"), vec!["1"]);
        assert_eq!(split_words(""), vec!["0"]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/126 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn is_sorted(lst: Vec<i32>) -> bool {

let mut seen = HashSet::new();
    let mut last = None;

    for &item in &lst {
        if seen.contains(&item) {
            return false;
        }
        seen.insert(item);
        if let Some(last_item) = last {
            if item <= last_item {
                return false;
            }
        }
        last = Some(item);
    }

    true
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_is_sorted() {
        assert_eq!(is_sorted(vec![5]), true);
        assert_eq!(is_sorted(vec![1, 2, 3, 4, 5]), true);
        assert_eq!(is_sorted(vec![1, 3, 2, 4, 5]), false);
        assert_eq!(is_sorted(vec![1, 2, 3, 4, 5, 6]), true);
        assert_eq!(is_sorted(vec![1, 2, 3, 4, 5, 6, 7]), true);
        assert_eq!(is_sorted(vec![1, 3, 2, 4, 5, 6, 7]), false);
        assert_eq!(is_sorted(vec![]), true);
        assert_eq!(is_sorted(vec![1]), true);
        assert_eq!(is_sorted(vec![3, 2, 1]), false);
        assert_eq!(is_sorted(vec![1, 2, 2, 2, 3, 4]), false);
        assert_eq!(is_sorted(vec![1, 2, 3, 3, 3, 4]), false);
        assert_eq!(is_sorted(vec![1, 2, 2, 3, 3, 4]), true);
        assert_eq!(is_sorted(vec![1, 2, 3, 4]), true);
    }


}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_126_gen0.jsonl

Testing Rust/127 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn intersection(interval1: Vec<i32>, interval2: Vec<i32>) -> String {

let start1 = interval1[0];
    let end1 = interval1[1];
    let start2 = interval2[0];
    let end2 = interval2[1];
    
    let intersection_start = cmp::max(start1, start2);
    let intersection_end = cmp::min(end1, end2);
    
    if intersection_start > intersection_end {
        return "NO".to_string();
    }
    
    let intersection_length = intersection_end - intersection_start + 1;
    
    if is_prime(intersection_length) {
        "YES".to_string()
    } else {
        "NO".to_string()
    }
}

fn is_prime(n: i32) -> bool {
    if n <= 1 {
        return false;
    }
    if n <= 3 {
        return true;
    }
    if n % 2 == 0 || n % 3 == 0 {
        return false;
    }
    let mut i = 5;
    while i * i <= n {
        if n % i == 0 || n % (i + 2) == 0 {
            return false;
        }
        i += 6;
    }
    true
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_intersection() {
        assert_eq!(intersection(vec![1, 2], vec![2, 3]), "NO");
        assert_eq!(intersection(vec![-1, 1], vec![0, 4]), "NO");
        assert_eq!(intersection(vec![-3, -1], vec![-5, 5]), "YES");
        assert_eq!(intersection(vec![-2, 2], vec![-4, 0]), "YES");
        assert_eq!(intersection(vec![-11, 2], vec![-1, -1]), "NO");
        assert_eq!(intersection(vec![1, 2], vec![3, 5]), "NO");
        assert_eq!(intersection(vec![1, 2], vec![1, 2]), "NO");
        assert_eq!(intersection(vec![-2, -2], vec![-3, -2]), "NO");
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_127_gen0.jsonl

Testing Rust/128 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn prod_signs(arr: Vec<i32>) -> i32 {

if arr.is_empty() {
        return 0;
    }

    let mut product_of_signs = 1;
    let mut sum_of_magnitudes = 0;

    for &num in &arr {
        sum_of_magnitudes += num.abs();
        if num == 0 {
            product_of_signs = 0;
            break;
        } else if num < 0 {
            product_of_signs *= -1;
        }
    }

    sum_of_magnitudes * product_of_signs
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_prod_signs() {
        assert_eq!(prod_signs(vec![1, 2, 2, -4]), -9);
        assert_eq!(prod_signs(vec![0, 1]), 0);
        assert_eq!(prod_signs(vec![1, 1, 1, 2, 3, -1, 1]), -10);
        assert_eq!(prod_signs(vec![]), -32768);
        assert_eq!(prod_signs(vec![2, 4, 1, 2, -1, -1, 9]), 20);
        assert_eq!(prod_signs(vec![-1, 1, -1, 1]), 4);
        assert_eq!(prod_signs(vec![-1, 1, 1, 1]), -4);
        assert_eq!(prod_signs(vec![-1, 1, 1, 0]), 0);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_128_gen0.jsonl

Testing Rust/129 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn min_path(grid: Vec<Vec<i32>>, k: i32) -> Vec<i32> {

let n = grid.len();
    let k = k as usize;
    let mut min_path = vec![i32::MAX; k];

fn dfs(grid: &Vec<Vec<i32>>, x: usize, y: usize, path: &mut Vec<i32>, k: usize, min_path: &mut Vec<i32>, visited: &mut Vec<Vec<bool>>) {
        if path.len() == k {
            if path < min_path {
                *min_path = path.clone();
            }
            return;
        }

        let directions = [(0, 1), (1, 0), (0, -1), (-1, 0)];
        for &(dx, dy) in &directions {
            let nx = (x as isize + dx) as usize;
            let ny = (y as isize + dy) as usize;
            if nx < grid.len() && ny < grid[0].len() && !visited[nx][ny] {
                visited[nx][ny] = true;
                path.push(grid[nx][ny]);
                dfs(grid, nx, ny, path, k, min_path, visited);
                path.pop();
                visited[nx][ny] = false;
            }
        }
    }

    for i in 0..n {
        for j in 0..n {
            let mut visited = vec![vec![false; n]; n];
            visited[i][j] = true;
            let mut path = vec![grid[i][j]];
            dfs(&grid, i, j, &mut path, k, &mut min_path, &mut visited);
        }
    }

    min_path
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_min_path() {
        assert_eq!(
            min_path(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]], 3),
            vec![1, 2, 1]
        );
        assert_eq!(
            min_path(vec![vec![5, 9, 3], vec![4, 1, 6], vec![7, 8, 2]], 1),
            vec![1]
        );
        assert_eq!(
            min_path(
                vec![
                    vec![1, 2, 3, 4],
                    vec![5, 6, 7, 8],
                    vec![9, 10, 11, 12],
                    vec![13, 14, 15, 16]
                ],
                4
            ),
            vec![1, 2, 1, 2]
        );
        assert_eq!(
            min_path(
                vec![
                    vec![6, 4, 13, 10],
                    vec![5, 7, 12, 1],
                    vec![3, 16, 11, 15],
                    vec![8, 14, 9, 2]
                ],
                7
            ),
            vec![1, 10, 1, 10, 1, 10, 1]
        );
        assert_eq!(
            min_path(
                vec![
                    vec![8, 14, 9, 2],
                    vec![6, 4, 13, 15],
                    vec![5, 7, 1, 12],
                    vec![3, 10, 11, 16]
                ],
                5
            ),
            vec![1, 7, 1, 7, 1]
        );
        assert_eq!(
            min_path(
                vec![
                    vec![11, 8, 7, 2],
                    vec![5, 16, 14, 4],
                    vec![9, 3, 15, 6],
                    vec![12, 13, 10, 1]
                ],
                9
            ),
            vec![1, 6, 1, 6, 1, 6, 1, 6, 1]
        );
        assert_eq!(
            min_path(
                vec![
                    vec![12, 13, 10, 1],
                    vec![9, 3, 15, 6],
                    vec![5, 16, 14, 4],
                    vec![11, 8, 7, 2]
                ],
                12
            ),
            vec![1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
        );
        assert_eq!(
            min_path(vec![vec![2, 7, 4], vec![3, 1, 5], vec![6, 8, 9]], 8),
            vec![1, 3, 1, 3, 1, 3, 1, 3]
        );

        assert_eq!(
            min_path(vec![vec![6, 1, 5], vec![3, 8, 9], vec![2, 7, 4]], 8),
            vec![1, 5, 1, 5, 1, 5, 1, 5]
        );

        assert_eq!(
            min_path(vec![vec![1, 2], vec![3, 4]], 10),
            vec![1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
        );

        assert_eq!(
            min_path(vec![vec![1, 3], vec![3, 2]], 10),
            vec![1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
        );
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_129_gen0.jsonl

Testing Rust/130 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn tri(n: i32) -> Vec<i32> {

if n < 0 {
        return vec![];
    }
    
    let mut sequence = vec![0; (n + 1) as usize];
    sequence[0] = 3;
    if n >= 1 {
        sequence[1] = 2;
    }
    if n >= 2 {
        sequence[2] = 3;
    }
    
    for i in 3..=n as usize {
        if i % 2 == 0 {
            sequence[i] = 1 + (i as i32 / 2);
        } else {
            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i - 3];
        }
    }
    
    sequence
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_tri() {
        assert!(tri(3) == vec![1, 3, 2, 8]);
        assert!(tri(4) == vec![1, 3, 2, 8, 3]);
        assert!(tri(5) == vec![1, 3, 2, 8, 3, 15]);
        assert!(tri(6) == vec![1, 3, 2, 8, 3, 15, 4]);
        assert!(tri(7) == vec![1, 3, 2, 8, 3, 15, 4, 24]);
        assert!(tri(8) == vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);
        assert!(tri(9) == vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);
        assert!(
            tri(20)
                == vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]
        );
        assert!(tri(0) == vec![1]);
        assert!(tri(1) == vec![1, 3]);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_130_gen0.jsonl

Testing Rust/131 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn digits(n: i32) -> i32 {

let mut product = 1;
    let mut has_odd = false;
    let mut num = n;

    while num > 0 {
        let digit = num % 10;
        if digit % 2 != 0 {
            product *= digit;
            has_odd = true;
        }
        num /= 10;
    }

    if has_odd {
        product
    } else {
        0
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_digits() {
        assert_eq!(digits(5), 5);
        assert_eq!(digits(54), 5);
        assert_eq!(digits(120), 1);
        assert_eq!(digits(5014), 5);
        assert_eq!(digits(98765), 315);
        assert_eq!(digits(5576543), 2625);
        assert_eq!(digits(2468), 0);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/132 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn is_nested(str: &str) -> bool {

let mut depth = 0;
    let mut max_depth = 0;

    for c in str.chars() {
        match c {
            '[' => {
                depth += 1;
                max_depth = max(max_depth, depth);
            },
            ']' => {
                if depth == 0 {
                    return false; // Unmatched closing bracket
                }
                depth -= 1;
            },
            _ => unreachable!(), // The input string should only contain '[' and ']'
        }
    }

    if depth != 0 {
        return false; // Unmatched opening bracket
    }

    max_depth > 1
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_is_nested() {
        assert_eq!(is_nested("[[]]"), true);
        assert_eq!(is_nested("[]]]]]]][[[[[]"), false);
        assert_eq!(is_nested("[][]"), false);
        assert_eq!(is_nested("[]"), false);
        assert_eq!(is_nested("[[[[]]]]"), true);
        assert_eq!(is_nested("[]]]]]]]]]]"), false);
        assert_eq!(is_nested("[][][[]]"), true);
        assert_eq!(is_nested("[[]"), false);
        assert_eq!(is_nested("[]]"), false);
        assert_eq!(is_nested("[[]][["), true);
        assert_eq!(is_nested("[[][]]"), true);
        assert_eq!(is_nested(""), false);
        assert_eq!(is_nested("[[[[[[[["), false);
        assert_eq!(is_nested("]]]]]]]]"), false);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_132_gen0.jsonl

Testing Rust/133 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sum_squares(lst: Vec<f32>) -> i32 {

lst.iter().enumerate().map(|(i, &x)| {
        if i % 3 == 0 {
            (x.powi(2)) as i32
        } else if i % 4 == 0 && i % 3 != 0 {
            (x.powi(3)) as i32
        } else {
            x as i32
        }
    }).sum()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sum_squares() {
        assert_eq!(sum_squares(vec![1.0, 2.0, 3.0]), 14);
        assert_eq!(sum_squares(vec![1.0, 2.0, 3.0]), 14);
        assert_eq!(sum_squares(vec![1.0, 3.0, 5.0, 7.0]), 84);
        assert_eq!(sum_squares(vec![1.4, 4.2, 0.0]), 29);
        assert_eq!(sum_squares(vec![-2.4, 1.0, 1.0]), 6);
        assert_eq!(sum_squares(vec![100.0, 1.0, 15.0, 2.0]), 10230);
        assert_eq!(sum_squares(vec![10000.0, 10000.0]), 200000000);
        assert_eq!(sum_squares(vec![-1.4, 4.6, 6.3]), 75);
        assert_eq!(sum_squares(vec![-1.4, 17.9, 18.9, 19.9]), 1086);
        assert_eq!(sum_squares(vec![0.0]), 0);
        assert_eq!(sum_squares(vec![-1.0]), 1);
        assert_eq!(sum_squares(vec![-1.0, 1.0, 0.0]), 2);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_133_gen0.jsonl

Testing Rust/134 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn check_if_last_char_is_a_letter(txt: &str) -> bool {

let trimmed = txt.trim_end();
    if trimmed.is_empty() {
        return false;
    }
    let chars: Vec<char> = trimmed.chars().collect();
    let last_char = chars.last().unwrap();
    if chars.len() == 1 {
        return last_char.is_alphabetic();
    }
    last_char.is_alphabetic() && !chars[chars.len() - 2].is_alphabetic()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_check_if_last_char_is_a_letter() {
        assert_eq!(check_if_last_char_is_a_letter("apple"), false);
        assert_eq!(check_if_last_char_is_a_letter("apple pi e"), true);
        assert_eq!(check_if_last_char_is_a_letter("eeeee"), false);
        assert_eq!(check_if_last_char_is_a_letter("A"), true);
        assert_eq!(check_if_last_char_is_a_letter("Pumpkin pie "), false);
        assert_eq!(check_if_last_char_is_a_letter("Pumpkin pie 1"), false);
        assert_eq!(check_if_last_char_is_a_letter(""), false);
        assert_eq!(check_if_last_char_is_a_letter("eeeee e "), false);
        assert_eq!(check_if_last_char_is_a_letter("apple pie"), false);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_134_gen0.jsonl

Testing Rust/135 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn can_arrange(arr: Vec<i32>) -> i32 {

let mut largest_index = -1;
    for i in 1..arr.len() {
        if arr[i] < arr[i - 1] {
            largest_index = max(largest_index, i as i32);
        }
    }
    largest_index
}

#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn test_can_arrange() {
        assert_eq!(can_arrange(vec![1, 2, 4, 3, 5]), 3);
        assert_eq!(can_arrange(vec![1, 2, 4, 5]), -1);
        assert_eq!(can_arrange(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]), 2);
        assert_eq!(can_arrange(vec![4, 8, 5, 7, 3]), 4);
        assert_eq!(can_arrange(vec![]), -1);
    }


}

-----CODE END-----
Generation 1: PASSED

Testing Rust/136 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn largest_smallest_integers(lst: Vec<i32>) -> Vec<i32> {

let mut largest_negative: Option<i32> = None;
    let mut smallest_positive: Option<i32> = None;

    for &num in &lst {
        if num < 0 {
            largest_negative = Some(match largest_negative {
                Some(largest) => cmp::max(largest, num),
                None => num,
            });
        } else if num > 0 {
            smallest_positive = Some(match smallest_positive {
                Some(smallest) => cmp::min(smallest, num),
                None => num,
            });
        }
    }

    let mut result = Vec::with_capacity(2);
    if let Some(largest) = largest_negative {
        result.push(largest);
    } else {
        result.push(0); // Using 0 to represent None for negative integers
    }
    if let Some(smallest) = smallest_positive {
        result.push(smallest);
    } else {
        result.push(0); // Using 0 to represent None for positive integers
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_largest_smallest_integers() {
        assert_eq!(
            largest_smallest_integers(vec![2, 4, 1, 3, 5, 7]),
            vec![0, 1]
        );
        assert_eq!(
            largest_smallest_integers(vec![2, 4, 1, 3, 5, 7, 0]),
            vec![0, 1]
        );
        assert_eq!(
            largest_smallest_integers(vec![1, 3, 2, 4, 5, 6, -2]),
            vec![-2, 1]
        );
        assert_eq!(
            largest_smallest_integers(vec![4, 5, 3, 6, 2, 7, -7]),
            vec![-7, 2]
        );
        assert_eq!(
            largest_smallest_integers(vec![7, 3, 8, 4, 9, 2, 5, -9]),
            vec![-9, 2]
        );
        assert_eq!(largest_smallest_integers(vec![]), vec![0, 0]);
        assert_eq!(largest_smallest_integers(vec![0]), vec![0, 0]);
        assert_eq!(largest_smallest_integers(vec![-1, -3, -5, -6]), vec![-1, 0]);
        assert_eq!(
            largest_smallest_integers(vec![-1, -3, -5, -6, 0]),
            vec![-1, 0]
        );
        assert_eq!(
            largest_smallest_integers(vec![-6, -4, -4, -3, 1]),
            vec![-3, 1]
        );
        assert_eq!(
            largest_smallest_integers(vec![-6, -4, -4, -3, -100, 1]),
            vec![-3, 1]
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/138 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn is_equal_to_sum_even(n: i32) -> bool {

// The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8
    if n < 8 {
        return false;
    }
    // If n is even and greater than or equal to 8, it can be expressed as the sum of 4 even numbers
    n % 2 == 0
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_is_equal_to_sum_even() {
        assert_eq!(is_equal_to_sum_even(4), false);
        assert_eq!(is_equal_to_sum_even(6), false);
        assert_eq!(is_equal_to_sum_even(8), true);
        assert_eq!(is_equal_to_sum_even(10), true);
        assert_eq!(is_equal_to_sum_even(11), false);
        assert_eq!(is_equal_to_sum_even(12), true);
        assert_eq!(is_equal_to_sum_even(13), false);
        assert_eq!(is_equal_to_sum_even(16), true);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/139 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn special_factorial(n: i32) -> i64 {



fn factorial(num: i32) -> u128 {
        (1..=num).fold(1, |acc, x| acc * x as u128)
    }

    let result: u128 = (1..=n).fold(1, |acc, x| acc * factorial(x));

    if result > i64::MAX as u128 {
        panic!("Result exceeds i64 range");
    }

    result as i64
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_special_factorial() {
        assert_eq!(special_factorial(4), 288);
        assert_eq!(special_factorial(5), 34560);
        assert_eq!(special_factorial(7), 125411328000);
        assert_eq!(special_factorial(1), 1);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/140 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn fix_spaces(text: &str) -> String {

let mut result = String::new();
    let mut space_count = 0;

    for c in text.chars() {
        if c == ' ' {
            space_count += 1;
        } else {
            if space_count > 2 {
                result.push('-');
            } else {
                result.extend(std::iter::repeat('_').take(space_count));
            }
            result.push(c);
            space_count = 0;
        }
    }

    if space_count > 2 {
        result.push('-');
    } else {
        result.extend(std::iter::repeat('_').take(space_count));
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_fix_spaces() {
        assert_eq!(fix_spaces("Example"), "Example");
        assert_eq!(fix_spaces("Mudasir Hanif "), "Mudasir_Hanif_");
        assert_eq!(
            fix_spaces("Yellow Yellow  Dirty  Fellow"),
            "Yellow_Yellow__Dirty__Fellow"
        );
        assert_eq!(fix_spaces("Exa   mple"), "Exa-mple");
        assert_eq!(fix_spaces("   Exa 1 2 2 mple"), "-Exa_1_2_2_mple");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/141 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn file_name_check(file_name: &str) -> &str {

let parts: Vec<&str> = file_name.split('.').collect();
    
    if parts.len() != 2 {
        return "No";
    }
    
    let (name, extension) = (parts[0], parts[1]);
    
    if name.is_empty() || !name.chars().next().unwrap().is_alphabetic() {
        return "No";
    }
    
    if !["txt", "exe", "dll"].contains(&extension) {
        return "No";
    }
    
    let digit_count = name.chars().filter(|c| c.is_digit(10)).count();
    
    if digit_count > 3 {
        return "No";
    }
    
    "Yes"
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_file_name_check() {
        assert_eq!(file_name_check("example.txt"), "Yes");
        assert_eq!(file_name_check("1example.dll"), "No");
        assert_eq!(file_name_check("s1sdf3.asd"), "No");
        assert_eq!(file_name_check("K.dll"), "Yes");
        assert_eq!(file_name_check("MY16FILE3.exe"), "Yes");
        assert_eq!(file_name_check("His12FILE94.exe"), "No");
        assert_eq!(file_name_check("_Y.txt"), "No");
        assert_eq!(file_name_check("?aREYA.exe"), "No");
        assert_eq!(file_name_check("/this_is_valid.dll"), "No");
        assert_eq!(file_name_check("this_is_valid.wow"), "No");
        assert_eq!(file_name_check("this_is_valid.txt"), "Yes");
        assert_eq!(file_name_check("this_is_valid.txtexe"), "No");
        assert_eq!(file_name_check("#this2_i4s_5valid.ten"), "No");
        assert_eq!(file_name_check("@this1_is6_valid.exe"), "No");
        assert_eq!(file_name_check("this_is_12valid.6exe4.txt"), "No");
        assert_eq!(file_name_check("all.exe.txt"), "No");
        assert_eq!(file_name_check("I563_No.exe"), "Yes");
        assert_eq!(file_name_check("Is3youfault.txt"), "Yes");
        assert_eq!(file_name_check("no_one#knows.dll"), "Yes");
        assert_eq!(file_name_check("1I563_Yes3.exe"), "No");
        assert_eq!(file_name_check("I563_Yes3.txtt"), "No");
        assert_eq!(file_name_check("final..txt"), "No");
        assert_eq!(file_name_check("final132"), "No");
        assert_eq!(file_name_check("_f4indsartal132."), "No");
        assert_eq!(file_name_check(".txt"), "No");
        assert_eq!(file_name_check("s."), "No");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/142 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sum_squares_142(lst: Vec<i32>) -> i32 {

fn sum_squares_142(lst: Vec<i32>) -> i32 {
    lst.iter().enumerate().map(|(i, &x)| {
        if i % 4 == 0 && i % 3 != 0 {
            x * x * x
        } else if i % 3 == 0 {
            x * x
        } else {
            x
        }
    }).sum()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sum_squares_142() {
        assert_eq!(sum_squares_142(vec![1, 2, 3]), 6);
        assert_eq!(sum_squares_142(vec![1, 4, 9]), 14);
        assert_eq!(sum_squares_142(vec![]), 0);
        assert_eq!(sum_squares_142(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);
        assert_eq!(
            sum_squares_142(vec![-1, -1, -1, -1, -1, -1, -1, -1, -1]),
            -3
        );
        assert_eq!(sum_squares_142(vec![0]), 0);
        assert_eq!(sum_squares_142(vec![-1, -5, 2, -1, -5]), -126);
        assert_eq!(sum_squares_142(vec![-56, -99, 1, 0, -2]), 3030);
        assert_eq!(sum_squares_142(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);
        assert_eq!(
            sum_squares_142(vec![
                -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37
            ]),
            -14196
        );
        assert_eq!(
            sum_squares_142(vec![
                -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10
            ]),
            -1448
        );
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_142_gen0.jsonl

Testing Rust/143 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn words_in_sentence(sentence: &str) -> String {



fn is_prime(n: usize) -> bool {
        if n <= 1 { return false; }
        if n <= 3 { return true; }
        if n % 2 == 0 || n % 3 == 0 { return false; }
        let mut i = 5;
        while i * i <= n {
            if n % i == 0 || n % (i + 2) == 0 { return false; }
            i += 6;
        }
        true
    }

    sentence.split_whitespace()
            .filter(|word| is_prime(word.len()))
            .collect::<Vec<&str>>()
            .join(" ")
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_words_in_sentence() {
        assert_eq!(words_in_sentence("This is a test"), "is");
        assert_eq!(words_in_sentence("lets go for swimming"), "go for");
        assert_eq!(
            words_in_sentence("there is no place available here"),
            "there is no place"
        );
        assert_eq!(words_in_sentence("Hi I am Hussein"), "Hi am Hussein");
        assert_eq!(words_in_sentence("go for it"), "go for it");
        assert_eq!(words_in_sentence("here"), "");
        assert_eq!(words_in_sentence("here is"), "is");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/144 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn simplify(x: &str, n: &str) -> bool {

let parse_fraction = |f: &str| {
        let parts: Vec<&str> = f.split('/').collect();
        (parts[0].parse::<i64>().unwrap(), parts[1].parse::<i64>().unwrap())
    };

    let (x_num, x_den) = parse_fraction(x);
    let (n_num, n_den) = parse_fraction(n);

    let numerator = x_num * n_num;
    let denominator = x_den * n_den;

    numerator % denominator == 0
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_simplify() {
        assert_eq!(simplify("1/5", "5/1"), true);
        assert_eq!(simplify("1/6", "2/1"), false);
        assert_eq!(simplify("5/1", "3/1"), true);
        assert_eq!(simplify("7/10", "10/2"), false);
        assert_eq!(simplify("2/10", "50/10"), true);
        assert_eq!(simplify("7/2", "4/2"), true);
        assert_eq!(simplify("11/6", "6/1"), true);
        assert_eq!(simplify("2/3", "5/2"), false);
        assert_eq!(simplify("5/2", "3/5"), false);
        assert_eq!(simplify("2/4", "8/4"), true);
        assert_eq!(simplify("2/4", "4/2"), true);
        assert_eq!(simplify("1/5", "5/1"), true);
        assert_eq!(simplify("1/5", "1/5"), false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/145 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn order_by_points(arr: Vec<i32>) -> Vec<i32> {

let mut indexed_arr: Vec<(usize, i32)> = arr.iter().enumerate().map(|(i, &val)| (i, val)).collect();
    indexed_arr.sort_by(|&(i1, val1), &(i2, val2)| {
        let sum1 = val1.abs().to_string().chars().map(|d| d.to_digit(10).unwrap() as i32).sum::<i32>();
        let sum2 = val2.abs().to_string().chars().map(|d| d.to_digit(10).unwrap() as i32).sum::<i32>();
        sum1.cmp(&sum2).then_with(|| i1.cmp(&i2))
    });
    indexed_arr.into_iter().map(|(_, val)| val).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_order_by_points() {
        assert_eq!(
            order_by_points(vec![1, 11, -1, -11, -12]),
            vec![-1, -11, 1, -12, 11]
        );
        assert_eq!(
            order_by_points(vec![
                1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46
            ]),
            vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
        );
        assert_eq!(order_by_points(vec![]), vec![]);
        assert_eq!(
            order_by_points(vec![1, -11, -32, 43, 54, -98, 2, -3]),
            vec![-3, -32, -98, -11, 1, 2, 43, 54]
        );
        assert_eq!(
            order_by_points(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
            vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
        );
        assert_eq!(
            order_by_points(vec![0, 6, 6, -76, -21, 23, 4]),
            vec![-76, -21, 0, 4, 23, 6, 6]
        );
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_145_gen0.jsonl

Testing Rust/146 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn special_filter(nums: Vec<i32>) -> i32 {

nums.iter()
        .filter(|&&num| num > 10 && {
            let digits: Vec<char> = num.to_string().chars().collect();
            let first_digit = digits.first().unwrap();
            let last_digit = digits.last().unwrap();
            ['1', '3', '5', '7', '9'].contains(first_digit) && ['1', '3', '5', '7', '9'].contains(last_digit)
        })
        .count() as i32
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_special_filter() {
        assert_eq!(special_filter(vec![5, -2, 1, -5]), 0);
        assert_eq!(special_filter(vec![15, -73, 14, -15]), 1);
        assert_eq!(special_filter(vec![33, -2, -3, 45, 21, 109]), 2);
        assert_eq!(special_filter(vec![43, -12, 93, 125, 121, 109]), 4);
        assert_eq!(special_filter(vec![71, -2, -33, 75, 21, 19]), 3);
        assert_eq!(special_filter(vec![1]), 0);
        assert_eq!(special_filter(vec![]), 0);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/147 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn get_matrix_triples(n: i32) -> i32 {

let mut a = Vec::new();
    for i in 1..=n {
        a.push(i * i - i + 1);
    }

    let mut count_mod = [0; 3];
    for &value in &a {
        count_mod[(value % 3) as usize] += 1;
    }

    let mut result = 0;

    // Case 1: All three numbers have the same remainder when divided by 3
    for &cnt in &count_mod {
        if cnt >= 3 {
            result += cnt * (cnt - 1) * (cnt - 2) / 6;
        }
    }

    // Case 2: All three numbers have different remainders when divided by 3
    result += count_mod[0] * count_mod[1] * count_mod[2];

    // Case 3: Two numbers have the same remainder and the third has a different remainder
    result += count_mod[0] * (count_mod[0] - 1) / 2 * count_mod[1];
    result += count_mod[0] * (count_mod[0] - 1) / 2 * count_mod[2];
    result += count_mod[1] * (count_mod[1] - 1) / 2 * count_mod[0];
    result += count_mod[1] * (count_mod[1] - 1) / 2 * count_mod[2];
    result += count_mod[2] * (count_mod[2] - 1) / 2 * count_mod[0];
    result += count_mod[2] * (count_mod[2] - 1) / 2 * count_mod[1];

    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_get_matrix_triples() {
        assert_eq!(get_matrix_triples(5), 1);
        assert_eq!(get_matrix_triples(6), 4);
        assert_eq!(get_matrix_triples(10), 36);
        assert_eq!(get_matrix_triples(100), 53361);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_147_gen0.jsonl

Testing Rust/148 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn bf(planet1: &str, planet2: &str) -> Vec<String> {

let planets = vec![
        "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"
    ];

    let index1 = planets.iter().position(|&p| p == planet1);
    let index2 = planets.iter().position(|&p| p == planet2);

    match (index1, index2) {
        (Some(i1), Some(i2)) => {
            if i1 == i2 {
                return Vec::new();
            }
            let (start, end) = if i1 < i2 { (i1 + 1, i2 + 1) } else { (i2 + 1, i1 + 1) };
            planets[start..end].iter().map(|&p| p.to_string()).collect()
        },
        _ => Vec::new()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_bf() {
        assert_eq!(bf("Jupiter", "Neptune"), vec!["Saturn", "Uranus"]);
        assert_eq!(bf("Earth", "Mercury"), vec!["Venus"]);
        assert_eq!(
            bf("Mercury", "Uranus"),
            vec!["Venus", "Earth", "Mars", "Jupiter", "Saturn"]
        );
        assert_eq!(
            bf("Neptune", "Venus"),
            vec!["Earth", "Mars", "Jupiter", "Saturn", "Uranus"]
        );
        let v_empty: Vec<&str> = vec![];
        assert_eq!(bf("Earth", "Earth"), v_empty);
        assert_eq!(bf("Mars", "Earth"), v_empty);
        assert_eq!(bf("Jupiter", "Makemake"), v_empty);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_148_gen0.jsonl

Testing Rust/149 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn sorted_list_sum(lst: Vec<&str>) -> Vec<&str> {

let mut filtered: Vec<&str> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();
    filtered.sort_by(|a, b| a.len().cmp(&b.len()).then_with(|| a.cmp(b)));
    filtered
}

#[cfg(test)]
mod tests {
    use super::*;

   #[test]
    fn test_sorted_list_sum() {
        assert_eq!(sorted_list_sum(vec!["aa", "a", "aaa"]), vec!["aa"]);
        assert_eq!(
            sorted_list_sum(vec!["school", "AI", "asdf", "b"]),
            vec!["AI", "asdf", "school"]
        );
        let v_empty: Vec<&str> = vec![];
        assert_eq!(sorted_list_sum(vec!["d", "b", "c", "a"]), v_empty);
        assert_eq!(
            sorted_list_sum(vec!["d", "dcba", "abcd", "a"]),
            vec!["abcd", "dcba"]
        );
        assert_eq!(
            sorted_list_sum(vec!["AI", "ai", "au"]),
            vec!["AI", "ai", "au"]
        );
        assert_eq!(sorted_list_sum(vec!["a", "b", "b", "c", "c", "a"]), v_empty);
        assert_eq!(
            sorted_list_sum(vec!["aaaa", "bbbb", "dd", "cc"]),
            vec!["cc", "dd", "aaaa", "bbbb"]
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/150 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn x_or_y(n: i32, x: i32, y: i32) -> i32 {

if n <= 1 {
        return y;
    }
    for i in 2..=((n as f64).sqrt() as i32) {
        if n % i == 0 {
            return y;
        }
    }
    x
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_x_or_y() {
        assert_eq!(x_or_y(7, 34, 12), 34);
        assert_eq!(x_or_y(15, 8, 5), 5);
        assert_eq!(x_or_y(3, 33, 5212), 33);
        assert_eq!(x_or_y(1259, 3, 52), 3);
        assert_eq!(x_or_y(7919, -1, 12), -1);
        assert_eq!(x_or_y(3609, 1245, 583), 583);
        assert_eq!(x_or_y(91, 56, 129), 129);
        assert_eq!(x_or_y(6, 34, 1234), 1234);
        assert_eq!(x_or_y(1, 2, 0), 0);
        assert_eq!(x_or_y(2, 2, 0), 2);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/151 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn double_the_difference(lst: Vec<f32>) -> i64 {

lst.into_iter()
        .filter(|&x| x.fract() == 0.0 && x >= 0.0 && x as i64 % 2 != 0)
        .map(|x| {
            let int_x = x as i64;
            int_x * int_x
        })
        .sum()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_double_the_difference() {
        assert_eq!(double_the_difference(vec![]), 0);
        assert_eq!(double_the_difference(vec![5.0, 4.0]), 25);
        assert_eq!(double_the_difference(vec![0.1, 0.2, 0.3]), 0);
        assert_eq!(double_the_difference(vec![-10.0, -20.0, -30.0]), 0);
        assert_eq!(double_the_difference(vec![-1.0, -2.0, 8.0]), 0);
        assert_eq!(double_the_difference(vec![0.2, 3.0, 5.0]), 34);

        let mut lst = vec![];
        let mut odd_sum = 0;
        for i in -99..100 {
            lst.push(i as f32);
            if i > 0 && i % 2 == 1 {
                odd_sum += i * i;
            }
        }
        assert_eq!(double_the_difference(lst), odd_sum);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/152 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn compare(game: Vec<i32>, guess: Vec<i32>) -> Vec<i32> {

game.iter().zip(guess.iter()).map(|(&g, &gu)| (g - gu).abs()).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_compare() {
        assert_eq!(
            compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]),
            vec![0, 0, 0, 0, 3, 3]
        );
        assert_eq!(
            compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2]),
            vec![4, 4, 1, 0, 0, 6]
        );
        assert_eq!(
            compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]),
            vec![0, 0, 0, 0, 3, 3]
        );
        assert_eq!(
            compare(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]),
            vec![0, 0, 0, 0, 0, 0]
        );
        assert_eq!(compare(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);
        assert_eq!(
            compare(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]),
            vec![2, 0, 0, 1]
        );
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/153 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn strongest_extension(class_name: &str, extensions: Vec<&str>) -> String { 

let mut strongest = "";
    let mut max_strength = i32::MIN;

    for &extension in &extensions {
        let cap_count = extension.chars().filter(|c| c.is_uppercase()).count() as i32;
        let sm_count = extension.chars().filter(|c| c.is_lowercase()).count() as i32;
        let strength = cap_count - sm_count;

        if strength > max_strength {
            max_strength = strength;
            strongest = extension;
        }
    }

    format!("{}.{}", class_name, strongest)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_strongest_extension() {
        assert_eq!(
            strongest_extension("Watashi", vec!["tEN", "niNE", "eIGHt8OKe"]),
            "Watashi.eIGHt8OKe"
        );
        assert_eq!(
            strongest_extension("Boku123", vec!["nani", "NazeDa", "YEs.WeCaNe", "32145tggg"]),
            "Boku123.YEs.WeCaNe"
        );
        assert_eq!(
            strongest_extension(
                "__YESIMHERE",
                vec!["t", "eMptY", "(nothing", "zeR00", "NuLl__", "123NoooneB321"]
            ),
            "__YESIMHERE.NuLl__"
        );
        assert_eq!(
            strongest_extension("K", vec!["Ta", "TAR", "t234An", "cosSo"]),
            "K.TAR"
        );
        assert_eq!(
            strongest_extension("__HAHA", vec!["Tab", "123", "781345", "-_-"]),
            "__HAHA.123"
        );
        assert_eq!(
            strongest_extension(
                "YameRore",
                vec!["HhAas", "okIWILL123", "WorkOut", "Fails", "-_-"]
            ),
            "YameRore.okIWILL123"
        );
        assert_eq!(
            strongest_extension("finNNalLLly", vec!["Die", "NowW", "Wow", "WoW"]),
            "finNNalLLly.WoW"
        );
        assert_eq!(strongest_extension("_", vec!["Bb", "91245"]), "_.Bb");
        assert_eq!(strongest_extension("Sp", vec!["671235", "Bb"]), "Sp.671235");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/154 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn cycpattern_check(a: &str, b: &str) -> bool {

let mut rotated_b = b.to_string();
    for _ in 0..b.len() {
        if a.contains(&rotated_b) {
            return true;
        }
        let first_char = rotated_b.remove(0);
        rotated_b.push(first_char);
    }
    false
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_cycpattern_check() {
        assert_eq!(cycpattern_check("xyzw", "xyw"), false);
        assert_eq!(cycpattern_check("yello", "ell"), true);
        assert_eq!(cycpattern_check("whattup", "ptut"), false);
        assert_eq!(cycpattern_check("efef", "fee"), true);
        assert_eq!(cycpattern_check("abab", "aabb"), false);
        assert_eq!(cycpattern_check("winemtt", "tinem"), true);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/155 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn even_odd_count(num: i32) -> Vec<i32> {

if num == 0 {
        return vec![1, 0];
    }

    let mut even_count = 0;
    let mut odd_count = 0;
    let mut n = num.abs();

    while n > 0 {
        let digit = n % 10;
        if digit % 2 == 0 {
            even_count += 1;
        } else {
            odd_count += 1;
        }
        n /= 10;
    }

    vec![even_count, odd_count]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_even_odd() {
        assert_eq!(even_odd_count(7), vec![0, 1]);
        assert_eq!(even_odd_count(-78), vec![1, 1]);
        assert_eq!(even_odd_count(3452), vec![2, 2]);
        assert_eq!(even_odd_count(346211), vec![3, 3]);
        assert_eq!(even_odd_count(-345821), vec![3, 3]);
        assert_eq!(even_odd_count(-2), vec![1, 0]);
        assert_eq!(even_odd_count(-45347), vec![2, 3]);
        assert_eq!(even_odd_count(0), vec![1, 0]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/156 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn int_to_mini_romank(number: i32) -> String {

fn int_to_mini_romank(number: i32) -> String {
    let mut num = number;
    let mut result = String::new();
    let roman_numerals = vec![
        (1000, "m"), (900, "cm"), (500, "d"), (400, "cd"),
        (100, "c"), (90, "xc"), (50, "l"), (40, "xl"),
        (10, "x"), (9, "ix"), (5, "v"), (4, "iv"), (1, "i")
    ];

    for &(value, symbol) in roman_numerals.iter() {
        while num >= value {
            result.push_str(symbol);
            num -= value;
        }
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_int_to_mini_romank() {
        assert_eq!(int_to_mini_romank(19), "xix");
        assert_eq!(int_to_mini_romank(152), "clii");
        assert_eq!(int_to_mini_romank(251), "ccli");
        assert_eq!(int_to_mini_romank(426), "cdxxvi");
        assert_eq!(int_to_mini_romank(500), "d");
        assert_eq!(int_to_mini_romank(1), "i");
        assert_eq!(int_to_mini_romank(4), "iv");
        assert_eq!(int_to_mini_romank(43), "xliii");
        assert_eq!(int_to_mini_romank(90), "xc");
        assert_eq!(int_to_mini_romank(94), "xciv");
        assert_eq!(int_to_mini_romank(532), "dxxxii");
        assert_eq!(int_to_mini_romank(900), "cm");
        assert_eq!(int_to_mini_romank(994), "cmxciv");
        assert_eq!(int_to_mini_romank(1000), "m");
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_156_gen0.jsonl

Testing Rust/157 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn right_angle_triangle(a: f32, b: f32, c: f32) -> bool {

// Check for invalid side lengths
    if a <= 0.0 || b <= 0.0 || c <= 0.0 {
        return false;
    }

    let sides = [a, b, c];
    let mut sides = sides.iter().cloned().collect::<Vec<_>>();
    sides.sort_by(|x, y| x.partial_cmp(y).unwrap());
    let (a, b, c) = (sides[0], sides[1], sides[2]);

    // Use a relative tolerance for floating-point comparison
    let tolerance = 1e-5;
    (a * a + b * b - c * c).abs() < tolerance * c * c
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_right_angle_triangle() {
        assert_eq!(right_angle_triangle(3.0, 4.0, 5.0), true);
        assert_eq!(right_angle_triangle(1.0, 2.0, 3.0), false);
        assert_eq!(right_angle_triangle(10.0, 6.0, 8.0), true);
        assert_eq!(right_angle_triangle(2.0, 2.0, 2.0), false);
        assert_eq!(right_angle_triangle(7.0, 24.0, 25.0), true);
        assert_eq!(right_angle_triangle(10.0, 5.0, 7.0), false);
        assert_eq!(right_angle_triangle(5.0, 12.0, 13.0), true);
        assert_eq!(right_angle_triangle(15.0, 8.0, 17.0), true);
        assert_eq!(right_angle_triangle(48.0, 55.0, 73.0), true);
        assert_eq!(right_angle_triangle(1.0, 1.0, 1.0), false);
        assert_eq!(right_angle_triangle(2.0, 2.0, 10.0), false);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/158 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn find_max(words: Vec<&str>) -> &str {

let mut max_word = "";
    let mut max_unique_chars = 0;

    for word in words {
        let unique_chars: HashSet<char> = word.chars().collect();
        let unique_count = unique_chars.len();

        if unique_count > max_unique_chars || (unique_count == max_unique_chars && word < max_word) {
            max_word = word;
            max_unique_chars = unique_count;
        }
    }

    max_word
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_find_max() {
        assert_eq!(find_max(vec!["name", "of", "string"]), "string");
        assert_eq!(find_max(vec!["name", "enam", "game"]), "enam");
        assert_eq!(find_max(vec!["aaaaaaa", "bb", "cc"]), "aaaaaaa");
        assert_eq!(find_max(vec!["abc", "cba"]), "abc");
        assert_eq!(
            find_max(vec!["play", "this", "game", "of", "footbott"]),
            "footbott"
        );
        assert_eq!(find_max(vec!["we", "are", "gonna", "rock"]), "gonna");
        assert_eq!(find_max(vec!["we", "are", "a", "mad", "nation"]), "nation");
        assert_eq!(find_max(vec!["this", "is", "a", "prrk"]), "this");
        assert_eq!(find_max(vec!["b"]), "b");
        assert_eq!(find_max(vec!["play", "play", "play"]), "play");
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/159 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn eat(number: i32, need: i32, remaining: i32) -> Vec<i32> {

let to_eat = cmp::min(need, remaining);
    let total_eaten = number + to_eat;
    let carrots_left = remaining - to_eat;
    vec![total_eaten, carrots_left]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_eat() {
        assert_eq!(eat(5, 6, 10), vec![11, 4]);
        assert_eq!(eat(4, 8, 9), vec![12, 1]);
        assert_eq!(eat(1, 10, 10), vec![11, 0]);
        assert_eq!(eat(2, 11, 5), vec![7, 0]);
        assert_eq!(eat(4, 5, 7), vec![9, 2]);
        assert_eq!(eat(4, 5, 1), vec![5, 0]);
    }

}

-----CODE END-----
Generation 1: PASSED

Testing Rust/160 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn do_algebra(operato: Vec<&str>, operand: Vec<i32>) -> i32 {

let mut output = VecDeque::new();
    let mut operators = Vec::new();
    let mut operands_iter = operand.iter();
    
    output.push_back(*operands_iter.next().unwrap());
    
    for op in operato {
        while let Some(&top_op) = operators.last() {
            if precedence(top_op) >= precedence(op) {
                let b = output.pop_back().unwrap();
                let a = output.pop_back().unwrap();
                output.push_back(apply_operator(top_op, a, b));
                operators.pop();
            } else {
                break;
            }
        }
        operators.push(op);
        output.push_back(*operands_iter.next().unwrap());
    }
    
    while let Some(op) = operators.pop() {
        let b = output.pop_back().unwrap();
        let a = output.pop_back().unwrap();
        output.push_back(apply_operator(op, a, b));
    }
    
    output.pop_back().unwrap()
}

fn precedence(op: &str) -> i32 {
    match op {
        "+" | "-" => 1,
        "*" | "//" => 2,
        "**" => 3,
        _ => 0,
    }
}





fn apply_operator(op: &str, a: i32, b: i32) -> i32 {
    match op {
        "+" => a + b,
        "-" => a - b,
        "*" => a * b,
        "//" => a / b,
        "**" => a.pow(b as u32),
        _ => panic!("Unsupported operation"),
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_do_algebra() {
        assert_eq!(do_algebra(vec!["**", "*", "+"], vec![2, 3, 4, 5]), 37);
        assert_eq!(do_algebra(vec!["+", "*", "-"], vec![2, 3, 4, 5]), 9);
        assert_eq!(do_algebra(vec!["//", "*"], vec![7, 3, 4]), 8);
    }


}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_160_gen0.jsonl

Testing Rust/161 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn solve_161(s: &str) -> String {

fn solve_161(s: &str) -> String {
    let mut has_letters = false;
    let mut result = String::new();

    for c in s.chars() {
        if c.is_ascii_alphabetic() {
            has_letters = true;
            if c.is_ascii_lowercase() {
                result.push(c.to_ascii_uppercase());
            } else {
                result.push(c.to_ascii_lowercase());
            }
        } else {
            result.push(c);
        }
    }

    if !has_letters {
        result = result.chars().rev().collect();
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_solve_161() {
        assert_eq!(solve_161("AsDf"), "aSdF");
        assert_eq!(solve_161("1234"), "4321");
        assert_eq!(solve_161("ab"), "AB");
        assert_eq!(solve_161("#a@C"), "#A@c");
        assert_eq!(solve_161("#AsdfW^45"), "#aSDFw^45");
        assert_eq!(solve_161("#6@2"), "2@6#");
        assert_eq!(solve_161("#$a^D"), "#$A^d");
        assert_eq!(solve_161("#ccc"), "#CCC");
    }

}

-----CODE END-----
Generation 1: failed: compilation error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_161_gen0.jsonl

Testing Rust/162 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn string_to_md5(text: &str) -> String {

if text.is_empty() {
        String::new()
    } else {
        format!("{:x}", md5::compute(text))
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_string_to_md5() {
        assert_eq!(
            string_to_md5("Hello world"),
            "3e25960a79dbc69b674cd4ec67a72c62"
        );
        assert_eq!(string_to_md5(""), "None");
        assert_eq!(string_to_md5("A B C"), "0ef78513b0cb8cef12743f5aeb35f888");
        assert_eq!(
            string_to_md5("password"),
            "5f4dcc3b5aa765d61d8327deb882cf99"
        );
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_162_gen0.jsonl

Testing Rust/163 (Generation 1/1):
-----CODE BEGIN-----

fn main(){}
use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};
use rand::Rng;
use regex::Regex;
use md5;
use std::any::{Any, TypeId};

fn generate_integers(a: i32, b: i32) -> Vec<i32> {

let (start, end) = if a < b { (a, b) } else { (b, a) };
    let mut even_digits = Vec::new();

    for num in start..=end {
        if num % 2 == 0 && num >= 0 {
            even_digits.push(num);
        }
    }

    even_digits
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_generate_integers() {
        assert_eq!(generate_integers(2, 10), vec![2, 4, 6, 8]);
        assert_eq!(generate_integers(10, 2), vec![2, 4, 6, 8]);
        assert_eq!(generate_integers(132, 2), vec![2, 4, 6, 8]);
        assert_eq!(generate_integers(17, 89), vec![]);
    }

}

-----CODE END-----
Generation 1: failed: execution error
See logs at: /home/john/Thesis/Rust_CoT_Eval/rust/tmp/logs/rust_163_gen0.jsonl
Top-1 Accuracy: 70.55% (115/163)
Evaluation results saved to newest_parsed_completions_eval.jsonl
