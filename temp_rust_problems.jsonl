{"task_id": "easy_sum_0", "entry_point": "sum", "declaration": "fn sum(a: i32, b: i32) -> i32` that returns the sum of two integers.", "prompt": "**Sum of Two Numbers:**\nWrite a function `fn sum(a: i32, b: i32) -> i32` that returns the sum of two integers.", "canonical_solution": "", "test": "", "is_general": false}
{"task_id": "easy_max_1", "entry_point": "max", "declaration": "fn max(a: i32, b: i32) -> i32` that returns the larger of two integers.", "prompt": "**Find the Maximum:**\nWrite a function `fn max(a: i32, b: i32) -> i32` that returns the larger of two integers.", "canonical_solution": "", "test": "", "is_general": false}
{"task_id": "medium_solution_0", "entry_point": "solution", "declaration": "fn solution() -> ()", "prompt": "**Atomic Counter**\nWrite a Rust program using `AtomicUsize` to implement a thread-safe counter that multiple threads can increment concurrently.", "canonical_solution": "", "test": "", "is_general": false}
{"task_id": "medium_solution_1", "entry_point": "solution", "declaration": "fn solution() -> ()", "prompt": "**Producer-Consumer with Channels**\nCreate a program that implements the producerâ€“consumer pattern using `std::sync::mpsc` channels. One or more producer threads should generate data while one or more consumer threads process that data.", "canonical_solution": "", "test": "", "is_general": false}
{"task_id": "hard_solution_0", "entry_point": "solution", "declaration": "fn solution() -> ()", "prompt": "**Library Management System**\nWrite a Rust program to simulate a library system that supports concurrent operations. The system should allow users to:  \n   - **Add a book** (requires Librarian permission).  \n   - **Remove a book** (requires Librarian permission).  \n   - **Borrow a book** (requires Member permission).  \n   - **Return a book** (requires Member permission).  \n   - **List available books** (accessible by all users).  \n   Ensure that when a user is adding, removing, borrowing, or returning a book, no other modification is allowed concurrently. Use appropriate locking or synchronization primitives.", "canonical_solution": "", "test": "", "is_general": false}
{"task_id": "hard_solution_1", "entry_point": "solution", "declaration": "fn solution() -> ()", "prompt": "**Chat Room Server**\nWrite a Rust program to implement a chat server that supports multiple chat rooms and concurrent message handling. The program should support:  \n   - **Send a message** (available to all users).  \n   - **Delete a message** (requires Moderator permission).  \n   - **Edit a message** (requires Moderator permission).  \n   - **Create a chat room** (requires Admin permission).  \n   - **List chat history** (accessible by all users).  \n   Ensure that modifications (like sending, deleting, or editing messages) are mutually exclusive, while allowing multiple users to view chat history concurrently.", "canonical_solution": "", "test": "", "is_general": false}
{"task_id": "creative_solution_0", "entry_point": "solution", "declaration": "fn solution() -> ()", "prompt": "**ASCII Art Generator**\nWrite a Rust program that converts input images into detailed, artistic black and white ASCII representations, using different character palettes for shading and depth.", "canonical_solution": "", "test": "", "is_general": false}
{"task_id": "creative_solution_1", "entry_point": "solution", "declaration": "fn solution() -> ()", "prompt": "**Procedural Planet Generator**\nGenerate procedurally textured planets with unique terrains and colors. Output the generated planets as images.", "canonical_solution": "", "test": "", "is_general": false}
