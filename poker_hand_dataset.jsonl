{"task_id": "poker_hand_winner", "entry_point": "compare_hands", "declaration": "fn compare_hands(hand1: &str, hand2: &str) -> &str", "prompt": "Write a function that will determine which Poker hand won. The function should take two poker hands as input strings and return which hand won. Each hand will be represented as a space-separated string of 5 cards, where each card is represented by a rank (2-10, J, Q, K, A) and a suit (H, D, C, S). For example: 'AH KH QH JH 10H' represents a royal flush in hearts. The function should handle all standard poker hand rankings: Royal Flush, Straight Flush, Four of a Kind, Full House, Flush, Straight, Three of a Kind, Two Pair, One Pair, and High Card. If the hands are equal in rank, use the highest card to break the tie.", "test": "fn test_compare_hands() {\n    // Test case 1: Royal Flush vs Straight Flush\n    assert_eq!(compare_hands(\"AH KH QH JH 10H\", \"KS QS JS 10S 9S\"), \"hand1\");\n    \n    // Test case 2: Four of a Kind vs Full House\n    assert_eq!(compare_hands(\"AS AH AC AD 2H\", \"KS KH KC 2S 2D\"), \"hand1\");\n    \n    // Test case 3: Flush vs Straight\n    assert_eq!(compare_hands(\"AH 2H 5H 8H JH\", \"KS QS JS 10S 9S\"), \"hand2\");\n    \n    // Test case 4: Three of a Kind vs Two Pair\n    assert_eq!(compare_hands(\"AS AH AC 2H 3H\", \"KS KH QS QH 2S\"), \"hand1\");\n    \n    // Test case 5: One Pair vs High Card\n    assert_eq!(compare_hands(\"AS AH 2H 3H 4H\", \"KS QH JH 10H 2S\"), \"hand1\");\n    \n    // Test case 6: Equal rank, different high cards\n    assert_eq!(compare_hands(\"AS AH 2H 3H 4H\", \"KS KH 2S 3S 4S\"), \"hand1\");\n    \n    // Test case 7: Equal hands\n    assert_eq!(compare_hands(\"AS AH 2H 3H 4H\", \"AS AH 2H 3H 4H\"), \"tie\");\n}"} 