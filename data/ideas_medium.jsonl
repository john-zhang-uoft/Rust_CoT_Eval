{"description": "**Atomic Counter**\nWrite a Rust program using `AtomicUsize` to implement a thread-safe counter that multiple threads can increment concurrently.", "difficulty": "medium"}
{"description": "**Producer-Consumer with Channels**\nCreate a program that implements the producer\u2013consumer pattern using `std::sync::mpsc` channels. One or more producer threads should generate data while one or more consumer threads process that data.", "difficulty": "medium"}
{"description": "**Shared Configuration Manager**\nDevelop a configuration manager where multiple threads read configuration values concurrently. Use an `RwLock` to allow multiple readers while restricting writes to a single thread at a time.", "difficulty": "medium"}
{"description": "**Concurrent File Reader**\nWrite a program that spawns several threads to read separate files concurrently. Combine the file contents safely into one aggregated output.", "difficulty": "medium"}
{"description": "**Simple Thread Pool**\nImplement a basic thread pool that accepts tasks from a shared queue and executes them concurrently. Ensure that task submission and execution are thread-safe.", "difficulty": "medium"}
{"description": "**Concurrent Vector Appender**\nCreate a program that spawns multiple threads which each append elements to a shared vector. Use a `Mutex` to ensure that the vector is updated safely.", "difficulty": "medium"}
{"description": "**Ticket Booking Simulation**\nSimulate a ticket booking system where multiple threads attempt to book tickets concurrently. Protect the available ticket count with a `Mutex` to avoid overselling.", "difficulty": "medium"}
{"description": "**Parallel Fibonacci Calculator**\nWrite a program that spawns several threads to calculate segments of the Fibonacci sequence concurrently, then combines the results into a final sequence.", "difficulty": "medium"}
{"description": "**Concurrent Logging System**\nDevelop a logging system where multiple threads write log messages to the same file concurrently. Use synchronization (like a `Mutex`) to prevent interleaving or corruption of log data.", "difficulty": "medium"}
{"description": "**Word Frequency Counter**\nBuild a program that concurrently processes multiple text files to count word frequencies. Merge the results from each thread safely into a shared summary.", "difficulty": "medium"}
{"description": "**Async HTTP Fetcher**\nWrite an asynchronous program using Tokio that concurrently makes HTTP GET requests to a list of URLs and prints each response status or content summary.", "difficulty": "medium"}
{"description": "**Parallel Merge Sort**\nImplement merge sort in parallel by dividing an array into segments, sorting each segment concurrently using threads, and then merging the sorted segments.", "difficulty": "medium"}
{"description": "**Sensor Data Aggregator**\nSimulate sensor data collection where multiple threads generate sensor readings and send them via channels to a central aggregator that computes statistics.", "difficulty": "medium"}
{"description": "**Shared Scoreboard Updater**\nCreate a program where multiple threads update a shared scoreboard concurrently. Use a `Mutex` or atomic types to ensure that all updates are safely recorded.", "difficulty": "medium"}
{"description": "**Parallel Prime Number Finder**\nWrite a program that divides a range of numbers among several threads to search for primes concurrently. Aggregate the results in a thread-safe manner.", "difficulty": "medium"}
{"description": "**Basic Web Crawler**\nDevelop a simple web crawler that uses multiple threads to fetch web pages concurrently. Store the visited URLs in a shared data structure protected by appropriate locks.", "difficulty": "medium"}
{"description": "**Concurrent Cache Implementation**\nCreate a simple cache using a `HashMap` protected by an `RwLock`, allowing multiple concurrent reads while ensuring exclusive access during writes.", "difficulty": "medium"}
{"description": "**Elevator System Simulator**\nWrite a simulation of an elevator system where separate threads handle floor requests and elevator movements concurrently, with shared state synchronized by locks.", "difficulty": "medium"}
{"description": "**Message Board System**\nBuild a concurrent message board where threads post messages to a shared board. Ensure that message ordering and consistency are maintained using synchronization primitives.", "difficulty": "medium"}
{"description": "**Distributed Hash Table Simulation**\nSimulate a simplified distributed hash table where threads represent nodes communicating via channels to store and retrieve key\u2013value pairs.", "difficulty": "medium"}
{"description": "**Concurrent File Downloader**\nWrite a program that downloads different segments of a file concurrently using multiple threads. Once all parts are downloaded, merge them into a complete file.", "difficulty": "medium"}
{"description": "**Order Processing System**\nImplement a simplified order processing system where multiple threads update the status of orders concurrently. Use a `Mutex` to ensure that each order is processed only once.", "difficulty": "medium"}
{"description": "**Distributed Hash Table Simulation**\nSimulate a simplified distributed hash table where threads represent nodes communicating via channels to store and retrieve key\u2013value pairs.\n\n21. **Concurrent File Downloader**  \n    Write a program that downloads different segments of a file concurrently using multiple threads. Once all parts are downloaded, merge them into a complete file.\n\n22. **Order Processing System**  \n    Implement a simplified order processing system where multiple threads update the status of orders concurrently. Use a `Mutex` to ensure that each order is processed only once.", "difficulty": "medium"}
