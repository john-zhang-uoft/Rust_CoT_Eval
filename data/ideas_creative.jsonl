{"description": "**ASCII Art Generator**\nWrite a Rust program that converts input images into detailed, artistic black and white ASCII representations, using different character palettes for shading and depth.", "difficulty": "extra_hard"}
{"description": "**Procedural Planet Generator**\nGenerate procedurally textured planets with unique terrains and colors. Output the generated planets as images.", "difficulty": "extra_hard"}
{"description": "**Maze Generator & Solver**\nDevelop a procedural maze generator using depth-first search or randomized Prim\u2019s algorithm, then implement a pathfinding algorithm solver like A*.", "difficulty": "extra_hard"}
{"description": "**Physics-based Puzzle Simulator**\nBuild a minimal physics-based puzzle game (in 2D or 3D) where players construct structures or machines to solve puzzles or complete challenges.", "difficulty": "extra_hard"}
{"description": "**Retro Snake Reinvented**\nProgram the classic Snake game with power ups and teleportation portals.", "difficulty": "extra_hard"}
{"description": "**Procedural Dungeon Crawler**\nCreate a procedurally generated dungeon crawler with random rooms, monsters, items, and special effects as a terminal application.", "difficulty": "extra_hard"}
{"description": "**City Traffic Simulator**\nSimulate city traffic dynamics in Rust, modeling intersections, traffic lights, and vehicle behaviors. \n    Model cities as graphs of nodes (intersections) and edges (roads).", "difficulty": "extra_hard"}
{"description": "**Customizable Chess Engine**\nWrite a chess engine in Rust that performs alpha-beta pruning on the move tree to choose the best next move. Evaluate the state of the board with a simple heuristic that sums the total points on your side compared to the opponent's side.\n    Pawns are 1 point, knights and bishops are 3, rooks are 5, and the queen is 9.\n    Ensure that the state of you checkmating your opponent is ranked higher than any other state.\n    Do not implement castling, pawn promotion, and en-passant to keep things simple.", "difficulty": "extra_hard"}
{"description": "**Genetic Algorithm Simulation**\nDevelop a Rust application that uses genetic algorithms to evolve and optimize the behaviour of agents in an environment.\n    The agents can choose to cooperate or to act aggressive with different probabilities.\n    There is a limited amount of food in the environment: if shared, both agents split the food. If the agents fight over the food, they win the fight with a probability dependent on its aggression.\n    An agent fighting uses energy.", "difficulty": "extra_hard"}
{"description": "**Candle Terminal Visualization**\nImplement a small terminal-based candle that flickers realistically with subtle ASCII animations.\n    Allow users to interact by \"blowing\" the candle with keypress interaction and re-lighting the candle.\n    Enough keypresses for blowing should blow the candle out", "difficulty": "extra_hard"}
