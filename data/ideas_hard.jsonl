{"description": "**Library Management System**\nWrite a Rust program to simulate a library system that supports concurrent operations. The system should allow users to:  \n   - **Add a book** (requires Librarian permission).  \n   - **Remove a book** (requires Librarian permission).  \n   - **Borrow a book** (requires Member permission).  \n   - **Return a book** (requires Member permission).  \n   - **List available books** (accessible by all users).  \n   Ensure that when a user is adding, removing, borrowing, or returning a book, no other modification is allowed concurrently. Use appropriate locking or synchronization primitives.", "difficulty": "hard"}
{"description": "**Chat Room Server**\nWrite a Rust program to implement a chat server that supports multiple chat rooms and concurrent message handling. The program should support:  \n   - **Send a message** (available to all users).  \n   - **Delete a message** (requires Moderator permission).  \n   - **Edit a message** (requires Moderator permission).  \n   - **Create a chat room** (requires Admin permission).  \n   - **List chat history** (accessible by all users).  \n   Ensure that modifications (like sending, deleting, or editing messages) are mutually exclusive, while allowing multiple users to view chat history concurrently.", "difficulty": "hard"}
{"description": "**Banking System Simulator**\nDevelop a Rust program to simulate a banking system with concurrent access to accounts. The operations should include:  \n   - **Deposit funds** (requires Teller permission or higher).  \n   - **Withdraw funds** (requires Teller permission or higher).  \n   - **Transfer funds between accounts** (requires Teller permission or higher).  \n   - **Check account balance** (accessible by all account holders).  \n   - **Generate account statements** (accessible by account holders and Auditors).  \n   Use synchronization mechanisms to ensure that account modifications occur without race conditions.", "difficulty": "hard"}
{"description": "**File System Simulator**\nCreate a Rust program to model a simple concurrent file system. The program should allow users to:  \n   - **Create a file** (requires Administrator permission).  \n   - **Delete a file** (requires Administrator permission).  \n   - **Move a file to a new directory** (requires Power User permission).  \n   - **Rename a file** (requires Power User permission).  \n   - **List directory contents** (accessible by all users).  \n   Use locks to ensure that file modifications are isolated from concurrent file listings.", "difficulty": "hard"}
{"description": "**Task Management System**\nWrite a Rust program that implements a concurrent task (to-do list) management system. The system should support:  \n   - **Add a task** (requires Manager permission).  \n   - **Remove a task** (requires Manager permission).  \n   - **Mark a task as complete/incomplete** (requires Team Member permission).  \n   - **Reorder tasks** (requires Team Member permission).  \n   - **View the task list** (accessible by all users).  \n   Ensure that task modifications are exclusive, while task viewing can be concurrent.", "difficulty": "hard"}
{"description": "**Voting and Proposal System**\nCreate a Rust program to model a voting system that allows concurrent operations on proposals. The system should include:  \n   - **Add a proposal** (requires Admin permission).  \n   - **Remove a proposal** (requires Admin permission).  \n   - **Vote on a proposal** (requires Voter permission).  \n   - **List all proposals** (accessible by all users).  \n   - **View vote counts** (accessible by all users).  \n   Use synchronization primitives to prevent vote or proposal data races.", "difficulty": "hard"}
{"description": "**Calendar Scheduler**\nWrite a Rust program to build a concurrent calendar scheduling system. The program should support:  \n   - **Add an event** (requires Organizer permission).  \n   - **Remove an event** (requires Organizer permission).  \n   - **Reschedule an event** (requires Organizer permission).  \n   - **List all events** (accessible by all users).  \n   - **View event details** (accessible by all users).  \n   Ensure that event modifications lock the calendar data exclusively.", "difficulty": "hard"}
{"description": "**Inventory Management System**\nDevelop a Rust program to simulate a warehouse inventory system with concurrent operations. The system should allow:  \n   - **Add a new inventory item** (requires Manager permission).  \n   - **Remove an inventory item** (requires Manager permission).  \n   - **Update item quantity** (requires Staff permission).  \n   - **Transfer items between locations** (requires Staff permission).  \n   - **List current inventory** (accessible by all users).  \n   Use appropriate locking to protect inventory updates.", "difficulty": "hard"}
{"description": "**Online Order Management**\nWrite a Rust program to implement an order management system for an online shop. It should support:  \n   - **Place an order** (accessible by Customers).  \n   - **Cancel an order** (requires Support Staff permission).  \n   - **Update order status** (requires Support Staff permission).  \n   - **List all orders** (accessible by all users).  \n   - **Search orders by criteria** (accessible by all users).  \n   Ensure that order modifications are synchronized to avoid inconsistencies.", "difficulty": "hard"}
{"description": "**Forum Thread Manager**\nCreate a Rust program to manage forum threads concurrently. The system should allow:  \n    - **Create a new post/thread** (accessible by all users).  \n    - **Delete a post/thread** (requires Moderator permission).  \n    - **Edit a post/thread** (requires Moderator permission).  \n    - **Move a thread to a different category** (requires Moderator permission).  \n    - **List all threads** (accessible by all users).  \n    Ensure that thread modifications are performed exclusively while listings can happen concurrently.", "difficulty": "hard"}
{"description": "**Game Lobby Manager**\nWrite a Rust program to simulate a game lobby system with concurrent user actions. The system should support:  \n    - **Create a lobby** (requires Admin permission).  \n    - **Join a lobby** (accessible by Players).  \n    - **Leave a lobby** (accessible by Players).  \n    - **Start a game** (requires Admin permission).  \n    - **List available lobbies** (accessible by all users).  \n    Use synchronization to ensure that lobby state remains consistent during concurrent updates.", "difficulty": "hard"}
{"description": "**Customer Support Ticketing System**\nDevelop a Rust program for a concurrent ticketing system used in customer support. The system should allow:  \n    - **Create a support ticket** (accessible by Customers).  \n    - **Close a ticket** (requires Support Agent permission).  \n    - **Reassign a ticket** (requires Support Agent permission).  \n    - **Update ticket details** (requires Support Agent permission).  \n    - **List all tickets** (accessible by all users).  \n    Ensure that ticket modifications are exclusive while read operations can occur concurrently.", "difficulty": "hard"}
{"description": "**Resource Booking System**\nWrite a Rust program to simulate a resource booking system (e.g., for meeting rooms) with concurrent operations. The system should support:  \n    - **Book a resource** (accessible by Employees).  \n    - **Cancel a booking** (accessible by Employees).  \n    - **Reschedule a booking** (requires Manager permission).  \n    - **List all bookings** (accessible by all users).  \n    - **Check resource availability** (accessible by all users).  \n    Synchronize booking operations to avoid double-booking scenarios.", "difficulty": "hard"}
{"description": "**Network Configuration Manager**\nCreate a Rust program that models a network configuration management system supporting concurrent modifications. The system should allow:  \n    - **Add a network configuration** (requires Network Admin permission).  \n    - **Remove a configuration** (requires Network Admin permission).  \n    - **Update a configuration** (requires Engineer permission).  \n    - **List all configurations** (accessible by all users).  \n    - **Rollback a configuration change** (requires Network Admin permission).  \n    Use synchronization to ensure consistency during configuration changes.", "difficulty": "hard"}
{"description": "**Stock Trading Simulator**\nWrite a Rust program to simulate a stock trading system with concurrent order processing. The system should support:  \n    - **Place a trading order** (accessible by Traders).  \n    - **Cancel an order** (accessible by Traders).  \n    - **Modify an existing order** (accessible by Traders).  \n    - **View the order book** (accessible by all users).  \n    - **Execute trades** (requires Broker permission).  \n    Synchronize order modifications and executions to maintain a consistent state.", "difficulty": "hard"}
{"description": "**Content Management System (CMS)**\nDevelop a Rust program to implement a CMS for blog posts with concurrent editing. The system should allow:  \n    - **Add a new post** (requires Author permission).  \n    - **Edit a post** (requires Editor permission).  \n    - **Delete a post** (requires Editor permission).  \n    - **Publish a post** (requires Publisher permission).  \n    - **List all posts** (accessible by all users).  \n    Ensure that content modifications are locked to prevent conflicts.", "difficulty": "hard"}
{"description": "**Project Management Tool**\nWrite a Rust program to simulate a project management system with concurrent operations. The system should support:  \n    - **Add a project/task** (requires Manager permission).  \n    - **Remove a project/task** (requires Manager permission).  \n    - **Update project/task details** (requires Team Member permission).  \n    - **Assign team members to a project** (requires Manager permission).  \n    - **List all projects/tasks** (accessible by all users).  \n    Use synchronization mechanisms to ensure consistent updates during concurrent operations.", "difficulty": "hard"}
{"description": "**API Rate Limiter**\nCreate a Rust program to implement a concurrent API rate limiter. The system should allow:  \n    - **Set a rate limit for an API endpoint** (requires Admin permission).  \n    - **Remove a rate limit** (requires Admin permission).  \n    - **Update an existing rate limit** (requires Admin permission).  \n    - **Check current rate limits** (accessible by Developers and Users).  \n    - **Validate an incoming request against the limits** (accessible by all).  \n    Ensure thread safety for concurrent rate limit checks and updates.", "difficulty": "hard"}
{"description": "**Data Pipeline Manager**\nWrite a Rust program to simulate a data pipeline management system with concurrent pipeline operations. The system should support:  \n    - **Add a new data pipeline** (requires Admin permission).  \n    - **Remove a data pipeline** (requires Admin permission).  \n    - **Modify pipeline steps** (requires Data Engineer permission).  \n    - **Execute a data pipeline** (requires Data Engineer permission).  \n    - **List all pipelines and their status** (accessible by all users).  \n    Use locks or other synchronization primitives to manage pipeline state concurrently.", "difficulty": "hard"}
{"description": "**IoT Device Controller**\nDevelop a Rust program to model an IoT device management system that supports concurrent operations. The system should allow:  \n    - **Add a new IoT device** (requires Administrator permission).  \n    - **Remove an IoT device** (requires Administrator permission).  \n    - **Update device settings** (requires Technician permission).  \n    - **Send commands to a device** (requires Technician permission).  \n    - **List all devices and statuses** (accessible by all users).  \n    Ensure that modifications to device configurations are safely synchronized.", "difficulty": "hard"}
